{
  "address": "0x64656718374e4fF6AC719470d6789A49f30AD573",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CheckpointAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "converter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeAMMWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeWithdrawnInRBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RBTCWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "converter",
          "type": "address"
        }
      ],
      "name": "UnwhitelistedConverter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevProcessedCheckpoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProcessedCheckpoints",
          "type": "uint256"
        }
      ],
      "name": "UserFeeProcessedNoWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "converter",
          "type": "address"
        }
      ],
      "name": "WhitelistedConverter",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "converterAddress",
          "type": "address"
        }
      ],
      "name": "addWhitelistedConverterAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getAccumulatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getAccumulatedRBTCFeeBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getNextPositiveUserCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "checkpointNum",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasSkippedCheckpoints",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasFees",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getWhitelistedConverterList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "converterList",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastFeeWithdrawalTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "numTokenCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "processedCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "contract IProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "converterAddress",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedConverterAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "totalWeightedStake",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "numTokens",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalTokenCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "transferRBTC",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_amount",
          "type": "uint96"
        }
      ],
      "name": "transferTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unprocessedAmount",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxCheckpoints",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_converters",
          "type": "address[]"
        }
      ],
      "name": "withdrawFeesAMM",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxCheckpoints",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawRBTC",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromCheckpoint",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_maxCheckpoints",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawRBTCStartingFromCheckpoint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromCheckpoint",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_maxCheckpoints",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawStartingFromCheckpoint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wrbtcAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWRBTC",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x54cda4eebdf150aad117d1938700d18ce73e4906e1a0a05e29d17db283ef6d1f",
  "receipt": {
    "to": null,
    "from": "0xFEe171A152C02F336021fb9E79b4fAc2304a9E7E",
    "contractAddress": "0x64656718374e4fF6AC719470d6789A49f30AD573",
    "transactionIndex": 0,
    "gasUsed": "4801536",
    "logsBloom": "0x
    "blockHash": "0xe0b23a4e3043a77ceb8385c6cf93dbb196eea17c410feaca5faa9f7ed409ca2b",
    "transactionHash": "0x54cda4eebdf150aad117d1938700d18ce73e4906e1a0a05e29d17db283ef6d1f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5238396,
        "transactionHash": "0x54cda4eebdf150aad117d1938700d18ce73e4906e1a0a05e29d17db283ef6d1f",
        "address": "0x64656718374e4fF6AC719470d6789A49f30AD573",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fee171a152c02f336021fb9e79b4fac2304a9e7e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe0b23a4e3043a77ceb8385c6cf93dbb196eea17c410feaca5faa9f7ed409ca2b"
      }
    ],
    "blockNumber": 5238396,
    "cumulativeGasUsed": "4801536",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "793d2f668bb9639bb96e66a7476bf440",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CheckpointAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeAMMWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawnInRBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RBTCWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"UnwhitelistedConverter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevProcessedCheckpoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProcessedCheckpoints\",\"type\":\"uint256\"}],\"name\":\"UserFeeProcessedNoWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"WhitelistedConverter\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"converterAddress\",\"type\":\"address\"}],\"name\":\"addWhitelistedConverterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getAccumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccumulatedRBTCFeeBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getNextPositiveUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"checkpointNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasSkippedCheckpoints\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasFees\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistedConverterList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"converterList\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFeeWithdrawalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"numTokenCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"processedCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"converterAddress\",\"type\":\"address\"}],\"name\":\"removeWhitelistedConverterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"totalWeightedStake\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"numTokens\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokenCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferRBTC\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_amount\",\"type\":\"uint96\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unprocessedAmount\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxCheckpoints\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_converters\",\"type\":\"address[]\"}],\"name\":\"withdrawFeesAMM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxCheckpoints\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawRBTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxCheckpoints\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawRBTCStartingFromCheckpoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromCheckpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxCheckpoints\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawStartingFromCheckpoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wrbtcAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawWRBTC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addWhitelistedConverterAddress(address)\":{\"details\":\"Whitelisting converter address.\",\"params\":{\"converterAddress\":\"converter address to be whitelisted.\"}},\"getAccumulatedFees(address,address)\":{\"params\":{\"_token\":\"RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\",\"_user\":\"The address of the user or contract.\"},\"return\":\"The accumulated fee for the message sender.\"},\"getAccumulatedRBTCFeeBalances(address)\":{\"details\":\"view function that calculate the total RBTC that includes: - RBTC - WRBTC - iWRBTC * iWRBTC.tokenPrice()\",\"params\":{\"_user\":\"address of the user.\"},\"return\":\"rbtc balance of the given user's address.\"},\"getNextPositiveUserCheckpoint(address,address)\":{\"details\":\"Returns first user's checkpoint with weighted stake > 0\",\"params\":{\"_token\":\"RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\",\"_user\":\"The address of the user or contract.\"},\"return\":\"Checkpoint number where user's weighted stake > 0\"},\"getWhitelistedConverterList()\":{\"return\":\"All of the whitelisted converter list.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"numTokenCheckpoints(address)\":{\"details\":\"This getter function `numTokenCheckpoints` is added for backwards compatibility     broken when renamed `numTokenCheckpoints` storage variable to `totalTokenCheckpoints`.\",\"params\":{\"_token\":\"token address to get checkpoints for\"},\"return\":\"Total token checkpoints\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeWhitelistedConverterAddress(address)\":{\"details\":\"Removing converter address from whitelist.\",\"params\":{\"converterAddress\":\"converter address to be removed from whitelist.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferRBTC()\":{\"details\":\"We just write checkpoint here (based on the rbtc value that is sent) in a separate methods in order to prevent adding checkpoints too often.\"},\"transferTokens(address,uint96)\":{\"details\":\"We just update amount of tokens here and write checkpoint in a separate methods in order to prevent adding checkpoints too often.\",\"params\":{\"_amount\":\"Amount to be transferred.\",\"_token\":\"Address of the token.\"}},\"withdraw(address,uint32,address)\":{\"params\":{\"_maxCheckpoints\":\"Maximum number of checkpoints to be processed. Must be positive value.\",\"_receiver\":\"The receiver of tokens or msg.sender\",\"_token\":\"RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\"}},\"withdrawFees(address[])\":{\"params\":{\"_tokens\":\"array address of the token\"}},\"withdrawFeesAMM(address[])\":{\"params\":{\"_converters\":\"array addresses of the converters\"}},\"withdrawRBTC(uint32,address)\":{\"details\":\"withdraw all of the RBTC balance based on particular checkpoints     * RBTC balance consists of: - rbtc balance - wrbtc balance which will be unwrapped to rbtc - iwrbtc balance which will be unwrapped to rbtc\",\"params\":{\"_maxCheckpoints\":\"Maximum number of checkpoints to be processed to workaround block gas limit\",\"_receiver\":\"An optional tokens receiver (msg.sender used if 0)\"}},\"withdrawRBTCStartingFromCheckpoint(uint256,uint32,address)\":{\"details\":\"Withdraw all of the RBTC balance based starting from a specific checkpoint The function was designed to skip checkpoints with no fees for users     * RBTC balance consists of: - rbtc balance - wrbtc balance which will be unwrapped to rbtc - iwrbtc balance which will be unwrapped to rbtcWARNING! This function skips all the checkpoints before '_fromCheckpoint' irreversibly, use with care\",\"params\":{\"_fromCheckpoint\":\"Skips all the checkpoints before '_fromCheckpoint'       should be calculated offchain with getNextPositiveUserCheckpoint function\",\"_maxCheckpoints\":\"Maximum number of checkpoints to be processed to workaround block gas limit\",\"_receiver\":\"An optional tokens receiver (msg.sender used if 0)\"}},\"withdrawStartingFromCheckpoint(address,uint256,uint32,address)\":{\"details\":\"WARNING! This function skips all the checkpoints before '_fromCheckpoint' irreversibly, use with care\",\"params\":{\"_fromCheckpoint\":\"Skips all the checkpoints before '_fromCheckpoint'       should be calculated offchain with getNextPositiveUserCheckpoint function\",\"_maxCheckpoints\":\"Maximum number of checkpoints to be processed.\",\"_receiver\":\"The receiver of tokens or msg.sender\",\"_token\":\"RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\"}}},\"title\":\"The FeeSharingCollector contract.\"},\"userdoc\":{\"methods\":{\"getAccumulatedFees(address,address)\":{\"notice\":\"Get the accumulated loan pool fee of the message sender.\"},\"getWhitelistedConverterList()\":{\"notice\":\"Getter to query all of the whitelisted converter.\"},\"transferRBTC()\":{\"notice\":\"Transfer RBTC / native tokens to this contract.\"},\"transferTokens(address,uint96)\":{\"notice\":\"Transfer tokens to this contract.\"},\"withdraw(address,uint32,address)\":{\"notice\":\"Withdraw accumulated fee to the message sender.     * The Sovryn protocol collects fees on every trade/swap and loan. These fees will be distributed to SOV stakers based on their voting power as a percentage of total voting power. Therefore, staking more SOV and/or staking for longer will increase your share of the fees generated, meaning you will earn more from staking.     * This function will directly burnToBTC and use the msg.sender (user) as the receiver\"},\"withdrawFees(address[])\":{\"notice\":\"Withdraw fees for the given token: lendingFee + tradingFee + borrowingFee the fees (except SOV) will be converted in wRBTC form, and then will be transferred to wRBTC loan pool. For SOV, it will be directly deposited into the feeSharingCollector from the protocol.\"},\"withdrawFeesAMM(address[])\":{\"notice\":\"Withdraw amm fees for the given converter addresses: protocolFee from the conversion the fees will be converted in wRBTC form, and then will be transferred to wRBTC loan pool\"},\"withdrawStartingFromCheckpoint(address,uint256,uint32,address)\":{\"notice\":\"Withdraw accumulated fee to the message sender/receiver.     * The Sovryn protocol collects fees on every trade/swap and loan. These fees will be distributed to SOV stakers based on their voting power as a percentage of total voting power.     * This function will directly burnToBTC and use the msg.sender (user) as the receiver\"}},\"notice\":\"This contract withdraws fees to be paid to SOV Stakers from the protocol. Stakers call withdraw() to get their share of the fees.Staking is not only granting voting rights, but also access to fee sharing according to the own voting power in relation to the total. Whenever somebody decides to collect the fees from the protocol, they get transferred to a proxy contract which invests the funds in the lending pool and keeps the pool tokens. * The fee sharing proxy will be set as feesController of the protocol contract. This allows the fee sharing proxy to withdraw the fees. The fee sharing proxy holds the pool tokens and keeps track of which user owns how many tokens. In order to know how many tokens a user owns, the fee sharing proxy needs to know the user\\u2019s weighted stake in relation to the total weighted stake (aka total voting power). * Because both values are subject to change, they may be different on each fee withdrawal. To be able to calculate a user\\u2019s share of tokens when he wants to withdraw, we need checkpoints. * This contract is intended to be set as the protocol fee collector. Anybody can invoke the withdrawFees function which uses protocol.withdrawFees to obtain available fees from operations on a certain token. These fees are deposited in the corresponding loanPool. Also, the staking contract sends slashed tokens to this contract. When a user calls the withdraw function, the contract transfers the fee sharing rewards in proportion to the user\\u2019s weighted stake since the last withdrawal. * The protocol initially collects fees in all tokens. Then the FeeSharingCollector wihtdraws fees from the protocol. When the fees are withdrawn all the tokens except SOV will be converted to wRBTC and then transferred to wRBTC loan pool. For SOV, it will be directly deposited into the feeSharingCollector from the protocol.\"}},\"settings\":{\"compilationTarget\":{\"contracts/governance/FeeSharingCollector/FeeSharingCollector.sol\":\"FeeSharingCollector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/governance/FeeSharingCollector/FeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\nimport \\\"../Staking/SafeMath96.sol\\\";\\nimport \\\"../../openzeppelin/SafeMath.sol\\\";\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"../../openzeppelin/Address.sol\\\";\\nimport \\\"./FeeSharingCollectorStorage.sol\\\";\\nimport \\\"../../interfaces/IConverterAMM.sol\\\";\\n\\n/**\\n * @title The FeeSharingCollector contract.\\n * @notice This contract withdraws fees to be paid to SOV Stakers from the protocol.\\n * Stakers call withdraw() to get their share of the fees.\\n *\\n * @notice Staking is not only granting voting rights, but also access to fee\\n * sharing according to the own voting power in relation to the total. Whenever\\n * somebody decides to collect the fees from the protocol, they get transferred\\n * to a proxy contract which invests the funds in the lending pool and keeps\\n * the pool tokens.\\n *\\n * The fee sharing proxy will be set as feesController of the protocol contract.\\n * This allows the fee sharing proxy to withdraw the fees. The fee sharing\\n * proxy holds the pool tokens and keeps track of which user owns how many\\n * tokens. In order to know how many tokens a user owns, the fee sharing proxy\\n * needs to know the user\\u2019s weighted stake in relation to the total weighted\\n * stake (aka total voting power).\\n *\\n * Because both values are subject to change, they may be different on each fee\\n * withdrawal. To be able to calculate a user\\u2019s share of tokens when he wants\\n * to withdraw, we need checkpoints.\\n *\\n * This contract is intended to be set as the protocol fee collector.\\n * Anybody can invoke the withdrawFees function which uses\\n * protocol.withdrawFees to obtain available fees from operations on a\\n * certain token. These fees are deposited in the corresponding loanPool.\\n * Also, the staking contract sends slashed tokens to this contract.\\n * When a user calls the withdraw function, the contract transfers the fee sharing\\n * rewards in proportion to the user\\u2019s weighted stake since the last withdrawal.\\n *\\n * The protocol initially collects fees in all tokens.\\n * Then the FeeSharingCollector wihtdraws fees from the protocol.\\n * When the fees are withdrawn all the tokens except SOV will be converted to wRBTC\\n * and then transferred to wRBTC loan pool.\\n * For SOV, it will be directly deposited into the feeSharingCollector from the protocol.\\n * */\\ncontract FeeSharingCollector is\\n    SafeMath96,\\n    IFeeSharingCollector,\\n    Ownable,\\n    FeeSharingCollectorStorage\\n{\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address constant ZERO_ADDRESS = address(0);\\n    address public constant RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT =\\n        address(uint160(uint256(keccak256(\\\"RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT\\\"))));\\n\\n    /* Events */\\n\\n    /// @notice Deprecated event after the unification between wrbtc & rbtc\\n    // event FeeWithdrawn(address indexed sender, address indexed token, uint256 amount);\\n    event FeeWithdrawnInRBTC(address indexed sender, uint256 amount);\\n\\n    /// @notice An event emitted when tokens transferred.\\n    event TokensTransferred(address indexed sender, address indexed token, uint256 amount);\\n\\n    /// @notice An event emitted when checkpoint added.\\n    event CheckpointAdded(address indexed sender, address indexed token, uint256 amount);\\n\\n    /// @notice An event emitted when user fee get withdrawn.\\n    event UserFeeWithdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    /// @notice An event emitted when user fee get withdrawn.\\n    event UserFeeProcessedNoWithdraw(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 prevProcessedCheckpoints,\\n        uint256 newProcessedCheckpoints\\n    );\\n\\n    /**\\n     * @notice An event emitted when fee from AMM get withdrawn.\\n     *\\n     * @param sender sender who initiate the withdrawn amm fees.\\n     * @param converter the converter address.\\n     * @param amount total amount of fee (Already converted to WRBTC).\\n     */\\n    event FeeAMMWithdrawn(address indexed sender, address indexed converter, uint256 amount);\\n\\n    /// @notice An event emitted when converter address has been registered to be whitelisted.\\n    event WhitelistedConverter(address indexed sender, address converter);\\n\\n    /// @notice An event emitted when converter address has been removed from whitelist.\\n    event UnwhitelistedConverter(address indexed sender, address converter);\\n\\n    event RBTCWithdrawn(address indexed sender, address indexed receiver, uint256 amount);\\n\\n    /* Functions */\\n\\n    /// @dev fallback function to support rbtc transfer when unwrap the wrbtc.\\n    function() external payable {}\\n\\n    /**\\n     * @notice Withdraw fees for the given token:\\n     * lendingFee + tradingFee + borrowingFee\\n     * the fees (except SOV) will be converted in wRBTC form, and then will be transferred to wRBTC loan pool.\\n     * For SOV, it will be directly deposited into the feeSharingCollector from the protocol.\\n     *\\n     * @param _tokens array address of the token\\n     * */\\n    function withdrawFees(address[] calldata _tokens) external {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            require(\\n                Address.isContract(_tokens[i]),\\n                \\\"FeeSharingCollector::withdrawFees: token is not a contract\\\"\\n            );\\n        }\\n\\n        uint256 wrbtcAmountWithdrawn = protocol.withdrawFees(_tokens, address(this));\\n\\n        IWrbtcERC20 wRBTCToken = protocol.wrbtcToken();\\n\\n        if (wrbtcAmountWithdrawn > 0) {\\n            // unwrap the wrbtc to rbtc, and hold the rbtc.\\n            wRBTCToken.withdraw(wrbtcAmountWithdrawn);\\n\\n            /// @notice Update unprocessed amount of tokens\\n            uint96 amount96 =\\n                safe96(\\n                    wrbtcAmountWithdrawn,\\n                    \\\"FeeSharingCollector::withdrawFees: wrbtc token amount exceeds 96 bits\\\"\\n                );\\n\\n            _addCheckpoint(RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT, amount96);\\n        }\\n\\n        // note deprecated event since we unify the wrbtc & rbtc\\n        // emit FeeWithdrawn(msg.sender, RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT, poolTokenAmount);\\n\\n        // note new emitted event\\n        emit FeeWithdrawnInRBTC(msg.sender, wrbtcAmountWithdrawn);\\n    }\\n\\n    /**\\n     * @notice Withdraw amm fees for the given converter addresses:\\n     * protocolFee from the conversion\\n     * the fees will be converted in wRBTC form, and then will be transferred to wRBTC loan pool\\n     *\\n     * @param _converters array addresses of the converters\\n     * */\\n    function withdrawFeesAMM(address[] memory _converters) public {\\n        IWrbtcERC20 wRBTCToken = protocol.wrbtcToken();\\n\\n        // Validate\\n        _validateWhitelistedConverter(_converters);\\n\\n        uint96 totalPoolTokenAmount;\\n        for (uint256 i = 0; i < _converters.length; i++) {\\n            uint256 wrbtcAmountWithdrawn =\\n                IConverterAMM(_converters[i]).withdrawFees(address(this));\\n\\n            if (wrbtcAmountWithdrawn > 0) {\\n                // unwrap wrbtc to rbtc, and hold the rbtc\\n                wRBTCToken.withdraw(wrbtcAmountWithdrawn);\\n\\n                /// @notice Update unprocessed amount of tokens\\n                uint96 amount96 =\\n                    safe96(\\n                        wrbtcAmountWithdrawn,\\n                        \\\"FeeSharingCollector::withdrawFeesAMM: wrbtc token amount exceeds 96 bits\\\"\\n                    );\\n\\n                totalPoolTokenAmount = add96(\\n                    totalPoolTokenAmount,\\n                    amount96,\\n                    \\\"FeeSharingCollector::withdrawFeesAMM: total wrbtc token amount exceeds 96 bits\\\"\\n                );\\n\\n                emit FeeAMMWithdrawn(msg.sender, _converters[i], wrbtcAmountWithdrawn);\\n            }\\n        }\\n\\n        if (totalPoolTokenAmount > 0) {\\n            _addCheckpoint(RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT, totalPoolTokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to this contract.\\n     * @dev We just update amount of tokens here and write checkpoint in a separate methods\\n     * in order to prevent adding checkpoints too often.\\n     * @param _token Address of the token.\\n     * @param _amount Amount to be transferred.\\n     * */\\n    function transferTokens(address _token, uint96 _amount) public {\\n        require(_token != ZERO_ADDRESS, \\\"FeeSharingCollector::transferTokens: invalid address\\\");\\n        require(_amount > 0, \\\"FeeSharingCollector::transferTokens: invalid amount\\\");\\n\\n        /// @notice Transfer tokens from msg.sender\\n        bool success = IERC20(_token).transferFrom(address(msg.sender), address(this), _amount);\\n        require(success, \\\"Staking::transferTokens: token transfer failed\\\");\\n\\n        // if _token is wrbtc, need to unwrap it to rbtc\\n        IWrbtcERC20 wrbtcToken = protocol.wrbtcToken();\\n        if (_token == address(wrbtcToken)) {\\n            wrbtcToken.withdraw(_amount);\\n            _token = RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT;\\n        }\\n\\n        _addCheckpoint(_token, _amount);\\n\\n        emit TokensTransferred(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfer RBTC / native tokens to this contract.\\n     * @dev We just write checkpoint here (based on the rbtc value that is sent) in a separate methods\\n     * in order to prevent adding checkpoints too often.\\n     * */\\n    function transferRBTC() external payable {\\n        uint96 _amount = uint96(msg.value);\\n        require(_amount > 0, \\\"FeeSharingCollector::transferRBTC: invalid value\\\");\\n\\n        _addCheckpoint(RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT, _amount);\\n\\n        emit TokensTransferred(msg.sender, ZERO_ADDRESS, _amount);\\n    }\\n\\n    /**\\n     * @notice Add checkpoint with accumulated amount by function invocation.\\n     * @param _token Address of the token.\\n     * */\\n    function _addCheckpoint(address _token, uint96 _amount) internal {\\n        if (block.timestamp - lastFeeWithdrawalTime[_token] >= FEE_WITHDRAWAL_INTERVAL) {\\n            lastFeeWithdrawalTime[_token] = block.timestamp;\\n            uint96 amount =\\n                add96(\\n                    unprocessedAmount[_token],\\n                    _amount,\\n                    \\\"FeeSharingCollector::_addCheckpoint: amount exceeds 96 bits\\\"\\n                );\\n\\n            /// @notice Reset unprocessed amount of tokens to zero.\\n            unprocessedAmount[_token] = 0;\\n\\n            /// @notice Write a regular checkpoint.\\n            _writeTokenCheckpoint(_token, amount);\\n        } else {\\n            unprocessedAmount[_token] = add96(\\n                unprocessedAmount[_token],\\n                _amount,\\n                \\\"FeeSharingCollector::_addCheckpoint: unprocessedAmount exceeds 96 bits\\\"\\n            );\\n        }\\n    }\\n\\n    function _withdraw(\\n        address _token,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) internal {\\n        /// @dev Prevents block gas limit hit when processing checkpoints\\n        require(\\n            _maxCheckpoints > 0,\\n            \\\"FeeSharingCollector::withdraw: _maxCheckpoints should be positive\\\"\\n        );\\n\\n        address wRBTCAddress = address(protocol.wrbtcToken());\\n        address loanPoolTokenWRBTC = _getAndValidateLoanPoolWRBTC(wRBTCAddress);\\n\\n        address user = msg.sender;\\n        if (_receiver == ZERO_ADDRESS) {\\n            _receiver = msg.sender;\\n        }\\n\\n        (uint256 amount, uint256 end) = _getAccumulatedFees(user, _token, _maxCheckpoints);\\n        if (amount == 0) {\\n            if (end > processedCheckpoints[user][_token]) {\\n                emit UserFeeProcessedNoWithdraw(\\n                    msg.sender,\\n                    _token,\\n                    processedCheckpoints[user][_token],\\n                    end\\n                );\\n                processedCheckpoints[user][_token] = end;\\n                return;\\n            } else {\\n                // getting here most likely means smth wrong with the state\\n                revert(\\\"FeeSharingCollector::withdrawFees: no tokens for withdrawal\\\");\\n            }\\n        }\\n\\n        processedCheckpoints[user][_token] = end;\\n        if (loanPoolTokenWRBTC == _token) {\\n            // We will change, so that feeSharingCollector will directly burn then loanToken (IWRBTC) to rbtc and send to the user --- by call burnToBTC function\\n            ILoanTokenWRBTC(_token).burnToBTC(_receiver, amount, false);\\n        } else {\\n            // Previously it directly send the loanToken to the user\\n            require(\\n                IERC20(_token).transfer(_receiver, amount),\\n                \\\"FeeSharingCollector::withdraw: withdrawal failed\\\"\\n            );\\n        }\\n\\n        emit UserFeeWithdrawn(msg.sender, _receiver, _token, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw accumulated fee to the message sender.\\n     *\\n     * The Sovryn protocol collects fees on every trade/swap and loan.\\n     * These fees will be distributed to SOV stakers based on their voting\\n     * power as a percentage of total voting power. Therefore, staking more\\n     * SOV and/or staking for longer will increase your share of the fees\\n     * generated, meaning you will earn more from staking.\\n     *\\n     * This function will directly burnToBTC and use the msg.sender (user) as the receiver\\n     *\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\\n     * @param _maxCheckpoints Maximum number of checkpoints to be processed. Must be positive value.\\n     * @param _receiver The receiver of tokens or msg.sender\\n     * */\\n    function withdraw(\\n        address _token,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) public nonReentrant {\\n        _withdraw(_token, _maxCheckpoints, _receiver);\\n    }\\n\\n    /// @notice Validates is the checkpoint is payable for the user\\n    modifier validFromCheckpointParam(\\n        uint256 _fromCheckpoint,\\n        address _user,\\n        address _token\\n    ) {\\n        // _fromCheckppoint is checkpoint number, not array index, so should be > 1\\n        require(_fromCheckpoint > 1, \\\"_fromCheckpoint param must be > 1\\\");\\n        uint256 fromCheckpointIndex = _fromCheckpoint - 1;\\n        require(\\n            _fromCheckpoint > processedCheckpoints[_user][_token],\\n            \\\"_fromCheckpoint param must be > userProcessedCheckpoints\\\"\\n        );\\n        require(\\n            _fromCheckpoint <= totalTokenCheckpoints[_token],\\n            \\\"_fromCheckpoint should be <= totalTokenCheckpoints\\\"\\n        );\\n\\n        Checkpoint memory prevCheckpoint = tokenCheckpoints[_token][fromCheckpointIndex - 1];\\n\\n        uint96 weightedStake =\\n            staking.getPriorWeightedStake(\\n                _user,\\n                prevCheckpoint.blockNumber,\\n                prevCheckpoint.timestamp\\n            );\\n        require(weightedStake == 0, \\\"User weighted stake should be zero at previous checkpoint\\\");\\n\\n        Checkpoint memory fromCheckpoint = tokenCheckpoints[_token][fromCheckpointIndex];\\n        weightedStake = staking.getPriorWeightedStake(\\n            _user,\\n            fromCheckpoint.blockNumber,\\n            fromCheckpoint.timestamp\\n        );\\n        require(weightedStake > 0, \\\"User weighted stake should be > 0 at  _fromCheckpoint\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Withdraw accumulated fee to the message sender/receiver.\\n     *\\n     * The Sovryn protocol collects fees on every trade/swap and loan.\\n     * These fees will be distributed to SOV stakers based on their voting\\n     * power as a percentage of total voting power.\\n     *\\n     * This function will directly burnToBTC and use the msg.sender (user) as the receiver\\n     *\\n     * @dev WARNING! This function skips all the checkpoints before '_fromCheckpoint' irreversibly, use with care\\n     *\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\\n     * @param _fromCheckpoint Skips all the checkpoints before '_fromCheckpoint'\\n     *        should be calculated offchain with getNextPositiveUserCheckpoint function\\n     * @param _maxCheckpoints Maximum number of checkpoints to be processed.\\n     * @param _receiver The receiver of tokens or msg.sender\\n     * */\\n    function withdrawStartingFromCheckpoint(\\n        address _token,\\n        uint256 _fromCheckpoint,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) public validFromCheckpointParam(_fromCheckpoint, msg.sender, _token) nonReentrant {\\n        if (_fromCheckpoint > processedCheckpoints[msg.sender][_token]) {\\n            processedCheckpoints[msg.sender][_token] = _fromCheckpoint.sub(1);\\n        }\\n        _withdraw(_token, _maxCheckpoints, _receiver);\\n    }\\n\\n    function _withdrawRBTC(uint32 _maxCheckpoints, address _receiver) internal {\\n        uint256 wrbtcAmount;\\n        uint256 rbtcAmount;\\n        uint256 iWrbtcAmount;\\n        uint256 endRBTC;\\n        uint256 endWRBTC;\\n        uint256 endIWRBTC;\\n        uint256 iWRBTCloanAmountPaid;\\n        address user = msg.sender;\\n\\n        IWrbtcERC20 wrbtcToken = protocol.wrbtcToken();\\n\\n        address loanPoolTokenWRBTC = _getAndValidateLoanPoolWRBTC(address(wrbtcToken));\\n\\n        if (_receiver == ZERO_ADDRESS) {\\n            _receiver = msg.sender;\\n        }\\n\\n        (rbtcAmount, wrbtcAmount, iWrbtcAmount, endRBTC, endWRBTC, endIWRBTC) = _getRBTCBalances(\\n            user,\\n            _maxCheckpoints\\n        );\\n\\n        if (rbtcAmount > 0) {\\n            processedCheckpoints[user][RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT] = endRBTC;\\n        }\\n\\n        // unwrap the wrbtc\\n        if (wrbtcAmount > 0) {\\n            processedCheckpoints[user][address(wrbtcToken)] = endWRBTC;\\n            wrbtcToken.withdraw(wrbtcAmount);\\n        }\\n\\n        // pull out the iWRBTC to rbtc to this feeSharingCollector contract\\n        if (iWrbtcAmount > 0) {\\n            processedCheckpoints[user][loanPoolTokenWRBTC] = endIWRBTC;\\n            iWRBTCloanAmountPaid = ILoanTokenWRBTC(loanPoolTokenWRBTC).burnToBTC(\\n                address(this),\\n                iWrbtcAmount,\\n                false\\n            );\\n        }\\n\\n        uint256 totalAmount = rbtcAmount.add(wrbtcAmount).add(iWRBTCloanAmountPaid);\\n        require(totalAmount > 0, \\\"FeeSharingCollector::withdrawFees: no rbtc for a withdrawal\\\");\\n\\n        // withdraw everything\\n        (bool success, ) = _receiver.call.value(totalAmount)(\\\"\\\");\\n        require(success, \\\"FeeSharingCollector::withdrawRBTC: Withdrawal failed\\\");\\n\\n        emit RBTCWithdrawn(user, _receiver, totalAmount);\\n    }\\n\\n    /**\\n     * @dev withdraw all of the RBTC balance based on particular checkpoints\\n     *\\n     * RBTC balance consists of:\\n     * - rbtc balance\\n     * - wrbtc balance which will be unwrapped to rbtc\\n     * - iwrbtc balance which will be unwrapped to rbtc\\n     *\\n     * @param _maxCheckpoints  Maximum number of checkpoints to be processed to workaround block gas limit\\n     * @param _receiver An optional tokens receiver (msg.sender used if 0)\\n     */\\n    function withdrawRBTC(uint32 _maxCheckpoints, address _receiver) external nonReentrant {\\n        _withdrawRBTC(_maxCheckpoints, _receiver);\\n    }\\n\\n    /**\\n     * @dev Withdraw all of the RBTC balance based starting from a specific checkpoint\\n     * The function was designed to skip checkpoints with no fees for users\\n     *\\n     * RBTC balance consists of:\\n     * - rbtc balance\\n     * - wrbtc balance which will be unwrapped to rbtc\\n     * - iwrbtc balance which will be unwrapped to rbtc\\n     *\\n     * @dev WARNING! This function skips all the checkpoints before '_fromCheckpoint' irreversibly, use with care\\n     *\\n     * @param _fromCheckpoint Skips all the checkpoints before '_fromCheckpoint'\\n     *        should be calculated offchain with getNextPositiveUserCheckpoint function\\n     * @param _maxCheckpoints  Maximum number of checkpoints to be processed to workaround block gas limit\\n     * @param _receiver An optional tokens receiver (msg.sender used if 0)\\n     */\\n    function withdrawRBTCStartingFromCheckpoint(\\n        uint256 _fromCheckpoint,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    )\\n        external\\n        validFromCheckpointParam(_fromCheckpoint, msg.sender, RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT)\\n        nonReentrant\\n    {\\n        if (\\n            _fromCheckpoint > processedCheckpoints[msg.sender][RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT]\\n        ) {\\n            processedCheckpoints[msg.sender][RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT] = _fromCheckpoint\\n                .sub(1);\\n        }\\n        _withdrawRBTC(_maxCheckpoints, _receiver);\\n    }\\n\\n    /**\\n     * @dev Returns first user's checkpoint with weighted stake > 0\\n     *\\n     * @param _user The address of the user or contract.\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\\n     * @return Checkpoint number where user's weighted stake > 0\\n     */\\n    function getNextPositiveUserCheckpoint(address _user, address _token)\\n        external\\n        view\\n        returns (\\n            uint256 checkpointNum,\\n            bool hasSkippedCheckpoints,\\n            bool hasFees\\n        )\\n    {\\n        if (staking.isVestingContract(_user)) {\\n            return (0, false, false);\\n        }\\n\\n        uint256 processedUserCheckpoints = processedCheckpoints[_user][_token];\\n        uint256 end = totalTokenCheckpoints[_token];\\n\\n        if (processedUserCheckpoints >= end || end == 0) {\\n            return (end, false, false);\\n        }\\n\\n        uint256 cachedLockDate = 0;\\n        // @note here processedUserCheckpoints is a number of processed checkpoints and\\n        // also an index for the next checkpoint because an array index starts wtih 0\\n        for (uint256 i = processedUserCheckpoints; i < end; i++) {\\n            Checkpoint storage tokenCheckpoint = tokenCheckpoints[_token][i];\\n            uint96 weightedStake =\\n                staking.getPriorWeightedStake(\\n                    _user,\\n                    tokenCheckpoint.blockNumber - 1,\\n                    tokenCheckpoint.timestamp\\n                );\\n            if (weightedStake > 0) {\\n                // i is the index and we need to return point num which is i + 1\\n                return (i + 1, i > processedUserCheckpoints, true);\\n            }\\n        }\\n        return (end, end > processedUserCheckpoints, false);\\n    }\\n\\n    /**\\n     * @notice Get the accumulated loan pool fee of the message sender.\\n     * @param _user The address of the user or contract.\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\\n     * @return The accumulated fee for the message sender.\\n     * */\\n    function getAccumulatedFees(address _user, address _token) public view returns (uint256) {\\n        uint256 amount;\\n        (amount, ) = _getAccumulatedFees(_user, _token, 0);\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Whenever fees are withdrawn, the staking contract needs to\\n     * checkpoint the block number, the number of pool tokens and the\\n     * total voting power at that time (read from the staking contract).\\n     * While the total voting power would not necessarily need to be\\n     * checkpointed, it makes sense to save gas cost on withdrawal.\\n     *\\n     * When the user wants to withdraw its share of tokens, we need\\n     * to iterate over all of the checkpoints since the users last\\n     * withdrawal (note: remember last withdrawal block), query the\\n     * user\\u2019s balance at the checkpoint blocks from the staking contract,\\n     * compute his share of the checkpointed tokens and add them up.\\n     * The maximum number of checkpoints to process at once should be limited.\\n     *\\n     * @param _user Address of the user's account.\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\\n     * @param _maxCheckpoints Max checkpoints to process at once to fit into block gas limit\\n     *\\n     * @return accumulated fees amount\\n     * @return end timestamp of fees calculation\\n     * */\\n    function _getAccumulatedFees(\\n        address _user,\\n        address _token,\\n        uint32 _maxCheckpoints\\n    ) internal view returns (uint256, uint256) {\\n        return _getAccumulatedFeesFromCheckpoint(0, _user, _token, _maxCheckpoints);\\n    }\\n\\n    /**\\n     * @notice Whenever fees are withdrawn, the staking contract needs to\\n     * checkpoint the block number, the number of pool tokens and the\\n     * total voting power at that time (read from the staking contract).\\n     * While the total voting power would not necessarily need to be\\n     * checkpointed, it makes sense to save gas cost on withdrawal.\\n     *\\n     * When the user wants to withdraw its share of tokens, we need\\n     * to iterate over all of the checkpoints since the users last\\n     * withdrawal (note: remember last withdrawal block), query the\\n     * user\\u2019s balance at the checkpoint blocks from the staking contract,\\n     * compute his share of the checkpointed tokens and add them up.\\n     * The maximum number of checkpoints to process at once should be limited.\\n     *\\n     * @param _user Address of the user's account.\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.\\n     * @param _maxCheckpoints Max checkpoints to process at once to fit into block gas limit\\n     * @param _fromCheckpoint Skips all the checkpoints before '_fromCheckpoint'\\n     *\\n     * @dev WARNING! Validation of _fromCheckpoint should be done in the caller\\n     *\\n     * @return accumulated fees amount\\n     * @return end timestamp of fees calculation\\n     * */\\n    function _getAccumulatedFeesFromCheckpoint(\\n        uint256 _fromCheckpoint,\\n        address _user,\\n        address _token,\\n        uint32 _maxCheckpoints\\n    ) internal view returns (uint256, uint256) {\\n        if (staking.isVestingContract(_user)) {\\n            return (0, 0);\\n        }\\n\\n        uint256 processedUserCheckpoints = processedCheckpoints[_user][_token];\\n        if (_fromCheckpoint > processedUserCheckpoints) {\\n            processedUserCheckpoints = _fromCheckpoint;\\n        }\\n        uint256 end =\\n            _maxCheckpoints > 0\\n                ? _getEndOfRange(processedUserCheckpoints, _token, _maxCheckpoints)\\n                : totalTokenCheckpoints[_token];\\n\\n        if (processedUserCheckpoints >= totalTokenCheckpoints[_token]) {\\n            return (0, end);\\n        }\\n\\n        uint256 amount = 0;\\n        uint256 cachedLockDate = 0;\\n        uint96 cachedWeightedStake = 0;\\n        // @note here processedUserCheckpoints is a number of processed checkpoints and\\n        // also an index for the next checkpoint because an array index starts wtih 0\\n        for (uint256 i = processedUserCheckpoints; i < end; i++) {\\n            Checkpoint storage checkpoint = tokenCheckpoints[_token][i];\\n            uint256 lockDate = staking.timestampToLockDate(checkpoint.timestamp);\\n            uint96 weightedStake;\\n            if (lockDate == cachedLockDate) {\\n                weightedStake = cachedWeightedStake;\\n            } else {\\n                /// @dev We need to use \\\"checkpoint.blockNumber - 1\\\" here to calculate weighted stake\\n                /// For the same block like we did for total voting power in _writeTokenCheckpoint\\n                weightedStake = staking.getPriorWeightedStake(\\n                    _user,\\n                    checkpoint.blockNumber - 1,\\n                    checkpoint.timestamp\\n                );\\n                cachedWeightedStake = weightedStake;\\n                cachedLockDate = lockDate;\\n            }\\n            uint256 share =\\n                uint256(checkpoint.numTokens).mul(weightedStake).div(\\n                    uint256(checkpoint.totalWeightedStake)\\n                );\\n            amount = amount.add(share);\\n        }\\n        return (amount, end);\\n    }\\n\\n    /**\\n     * @notice Withdrawal should only be possible for blocks which were already\\n     * mined. If the fees are withdrawn in the same block as the user withdrawal\\n     * they are not considered by the withdrawing logic (to avoid inconsistencies).\\n     *\\n     * @param start Start of the range.\\n     * @param _token RBTC dummy to fit into existing data structure or SOV. Former address of a pool token.\\n     * @param _maxCheckpoints Checkpoint index incremental.\\n     * */\\n    function _getEndOfRange(\\n        uint256 start,\\n        address _token,\\n        uint32 _maxCheckpoints\\n    ) internal view returns (uint256) {\\n        uint256 nextCheckpointsIndex = totalTokenCheckpoints[_token];\\n        if (nextCheckpointsIndex == 0) {\\n            return 0;\\n        }\\n        uint256 lastCheckpointsIndex = nextCheckpointsIndex - 1;\\n        uint256 end;\\n\\n        if (_maxCheckpoints == 0) {\\n            /// @dev All checkpoints will be processed (only for getter outside of a transaction).\\n            end = nextCheckpointsIndex;\\n        } else {\\n            end = safe32(\\n                start + _maxCheckpoints,\\n                \\\"FeeSharingCollector::withdraw: checkpoint index exceeds 32 bits\\\"\\n            );\\n            if (end > nextCheckpointsIndex) {\\n                end = nextCheckpointsIndex;\\n            }\\n        }\\n\\n        /// @dev Withdrawal should only be possible for blocks which were already mined.\\n        uint32 lastBlockNumber = tokenCheckpoints[_token][lastCheckpointsIndex].blockNumber;\\n        if (block.number == lastBlockNumber) {\\n            end = lastCheckpointsIndex;\\n        }\\n        return end;\\n    }\\n\\n    /**\\n     * @notice Write a regular checkpoint w/ the foolowing data:\\n     * block number, block timestamp, total weighted stake and num of tokens.\\n     * @param _token The pool token address.\\n     * @param _numTokens The amount of pool tokens.\\n     * */\\n    function _writeTokenCheckpoint(address _token, uint96 _numTokens) internal {\\n        uint32 blockNumber =\\n            safe32(\\n                block.number,\\n                \\\"FeeSharingCollector::_writeCheckpoint: block number exceeds 32 bits\\\"\\n            );\\n        uint32 blockTimestamp =\\n            safe32(\\n                block.timestamp,\\n                \\\"FeeSharingCollector::_writeCheckpoint: block timestamp exceeds 32 bits\\\"\\n            );\\n        uint256 nextCheckpointsIndex = totalTokenCheckpoints[_token];\\n\\n        uint96 totalWeightedStake = _getVoluntaryWeightedStake(blockNumber - 1, block.timestamp);\\n        require(totalWeightedStake > 0, \\\"Invalid totalWeightedStake\\\");\\n        if (\\n            nextCheckpointsIndex > 0 &&\\n            tokenCheckpoints[_token][nextCheckpointsIndex - 1].blockNumber == blockNumber\\n        ) {\\n            tokenCheckpoints[_token][nextCheckpointsIndex - 1]\\n                .totalWeightedStake = totalWeightedStake;\\n            tokenCheckpoints[_token][nextCheckpointsIndex - 1].numTokens = _numTokens;\\n        } else {\\n            tokenCheckpoints[_token][nextCheckpointsIndex] = Checkpoint(\\n                blockNumber,\\n                blockTimestamp,\\n                totalWeightedStake,\\n                _numTokens\\n            );\\n            totalTokenCheckpoints[_token] = nextCheckpointsIndex + 1;\\n        }\\n        emit CheckpointAdded(msg.sender, _token, _numTokens);\\n    }\\n\\n    /**\\n     * Queries the total weighted stake and the weighted stake of vesting contracts and returns the difference\\n     * @param blockNumber the blocknumber\\n     * @param timestamp the timestamp\\n     */\\n    function _getVoluntaryWeightedStake(uint32 blockNumber, uint256 timestamp)\\n        internal\\n        view\\n        returns (uint96 totalWeightedStake)\\n    {\\n        uint96 vestingWeightedStake = staking.getPriorVestingWeightedStake(blockNumber, timestamp);\\n        totalWeightedStake = staking.getPriorTotalVotingPower(blockNumber, timestamp);\\n        totalWeightedStake = sub96(\\n            totalWeightedStake,\\n            vestingWeightedStake,\\n            \\\"FeeSharingCollector::_getTotalVoluntaryWeightedStake: vested stake exceeds total stake\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Whitelisting converter address.\\n     *\\n     * @param converterAddress converter address to be whitelisted.\\n     */\\n    function addWhitelistedConverterAddress(address converterAddress) external onlyOwner {\\n        require(Address.isContract(converterAddress), \\\"Non contract address given\\\");\\n        whitelistedConverterList.add(converterAddress);\\n        emit WhitelistedConverter(msg.sender, converterAddress);\\n    }\\n\\n    /**\\n     * @dev Removing converter address from whitelist.\\n     *\\n     * @param converterAddress converter address to be removed from whitelist.\\n     */\\n    function removeWhitelistedConverterAddress(address converterAddress) external onlyOwner {\\n        whitelistedConverterList.remove(converterAddress);\\n        emit UnwhitelistedConverter(msg.sender, converterAddress);\\n    }\\n\\n    /**\\n     * @notice Getter to query all of the whitelisted converter.\\n     * @return All of the whitelisted converter list.\\n     */\\n    function getWhitelistedConverterList() external view returns (address[] memory converterList) {\\n        converterList = whitelistedConverterList.enumerate();\\n    }\\n\\n    /**\\n     * @dev validate array of given address whether is whitelisted or not.\\n     * @dev if one of them is not whitelisted, then revert.\\n     *\\n     * @param converterAddresses array of converter addresses.\\n     */\\n    function _validateWhitelistedConverter(address[] memory converterAddresses) private view {\\n        for (uint256 i = 0; i < converterAddresses.length; i++) {\\n            require(whitelistedConverterList.contains(converterAddresses[i]), \\\"Invalid Converter\\\");\\n        }\\n    }\\n\\n    function withdrawWRBTC(address receiver, uint256 wrbtcAmount) external onlyOwner {\\n        address wRBTCAddress = address(protocol.wrbtcToken());\\n\\n        uint256 balance = IERC20(wRBTCAddress).balanceOf(address(this));\\n        require(wrbtcAmount <= balance, \\\"Insufficient balance\\\");\\n\\n        IERC20(wRBTCAddress).safeTransfer(receiver, wrbtcAmount);\\n    }\\n\\n    /**\\n     * @dev view function that calculate the total RBTC that includes:\\n     * - RBTC\\n     * - WRBTC\\n     * - iWRBTC * iWRBTC.tokenPrice()\\n     * @param _user address of the user.\\n     * @return rbtc balance of the given user's address.\\n     */\\n    function getAccumulatedRBTCFeeBalances(address _user) external view returns (uint256) {\\n        uint256 _rbtcAmount;\\n        uint256 _wrbtcAmount;\\n        uint256 _iWrbtcAmount;\\n        (_rbtcAmount, _wrbtcAmount, _iWrbtcAmount, , , ) = _getRBTCBalances(_user, 0);\\n        return _rbtcAmount.add(_wrbtcAmount).add(_iWrbtcAmount);\\n    }\\n\\n    /**\\n     * @dev private function that responsible to calculate the user's token that has RBTC as underlying token (rbtc, wrbtc, iWrbtc)\\n     *\\n     * @param _user address of the user.\\n     * @param _maxCheckpoints maximum checkpoints.\\n     *\\n     * @return _rbtcAmount rbtc amount\\n     * @return _wrbtcAmount wrbtc amount\\n     * @return _iWrbtcAmount iWrbtc (wrbtc lending pool token) amount * token price\\n     * @return _endRBTC end time of accumulated fee calculation for rbtc\\n     * @return _endWRBTC end time of accumulated fee calculation for wrbtc\\n     * @return _endIWRBTC end time of accumulated fee calculation for iwrbtc\\n     */\\n    function _getRBTCBalances(address _user, uint32 _maxCheckpoints)\\n        private\\n        view\\n        returns (\\n            uint256 _rbtcAmount,\\n            uint256 _wrbtcAmount,\\n            uint256 _iWrbtcAmount,\\n            uint256 _endRBTC,\\n            uint256 _endWRBTC,\\n            uint256 _endIWRBTC\\n        )\\n    {\\n        IWrbtcERC20 wrbtcToken = protocol.wrbtcToken();\\n\\n        address loanPoolTokenWRBTC = _getAndValidateLoanPoolWRBTC(address(wrbtcToken));\\n\\n        (_rbtcAmount, _endRBTC) = _getAccumulatedFees(\\n            _user,\\n            RBTC_DUMMY_ADDRESS_FOR_CHECKPOINT,\\n            _maxCheckpoints\\n        );\\n        (_wrbtcAmount, _endWRBTC) = _getAccumulatedFees(\\n            _user,\\n            address(wrbtcToken),\\n            _maxCheckpoints\\n        );\\n        (_iWrbtcAmount, _endIWRBTC) = _getAccumulatedFees(\\n            _user,\\n            loanPoolTokenWRBTC,\\n            _maxCheckpoints\\n        );\\n\\n        _iWrbtcAmount = _iWrbtcAmount.mul(ILoanTokenWRBTC(loanPoolTokenWRBTC).tokenPrice()).div(\\n            1e18\\n        );\\n    }\\n\\n    /**\\n     * @dev private function to get and validate the wrbtc loan pool token address based on the wrbtc token address.\\n     * @dev will revert if wrbtc loan pool token does not exist (zero address)\\n     *\\n     * @param _wRBTCAddress wrbtc token address.\\n     *\\n     * @return wrbtc loan pool wrbtc token address\\n     */\\n    function _getAndValidateLoanPoolWRBTC(address _wRBTCAddress) private view returns (address) {\\n        address loanPoolTokenWRBTC = protocol.underlyingToLoanPool(_wRBTCAddress);\\n        require(\\n            loanPoolTokenWRBTC != ZERO_ADDRESS,\\n            \\\"FeeSharingCollector::withdraw: loan wRBTC not found\\\"\\n        );\\n\\n        return loanPoolTokenWRBTC;\\n    }\\n\\n    // @todo update dependency `numTokenCheckpoints` -> `totalTokenCheckpoints` and deprecate numTokenCheckpoints function\\n    /**\\n     * @dev This getter function `numTokenCheckpoints` is added for backwards compatibility\\n     *      broken when renamed `numTokenCheckpoints` storage variable to `totalTokenCheckpoints`.\\n     *\\n     * @param _token token address to get checkpoints for\\n     *\\n     * @return Total token checkpoints\\n     */\\n    function numTokenCheckpoints(address _token) external view returns (uint256) {\\n        return totalTokenCheckpoints[_token];\\n    }\\n}\\n\\n/* Interfaces */\\ninterface ILoanToken {\\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\\n}\\n\\ninterface ILoanTokenWRBTC {\\n    function burnToBTC(\\n        address receiver,\\n        uint256 burnAmount,\\n        bool useLM\\n    ) external returns (uint256 loanAmountPaid);\\n\\n    function tokenPrice() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x523f122f7fb9c69ca8260be21e0464dd31b0d7fbd440873c39481c98cd24eb3a\"},\"contracts/governance/FeeSharingCollector/FeeSharingCollectorStorage.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../openzeppelin/Ownable.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../IFeeSharingCollector.sol\\\";\\nimport \\\"../Staking/interfaces/IStaking.sol\\\";\\nimport \\\"../../mixins/EnumerableAddressSet.sol\\\";\\nimport \\\"../../interfaces/IWrbtcERC20.sol\\\";\\n\\n/**\\n * @title FeeSharingCollectorStorage contact\\n * @notice Just the storage part of FeeSharingCollector contract, and FeeSharingCollectorProxy. No functions,\\n * only constant, variables and required structures (mappings)\\n * */\\ncontract FeeSharingCollectorStorage is Ownable {\\n    using EnumerableAddressSet for EnumerableAddressSet.AddressSet;\\n    uint256 constant FEE_WITHDRAWAL_INTERVAL = 86400;\\n\\n    IProtocol public protocol;\\n    IStaking public staking;\\n\\n    /// @notice Checkpoints by index per pool token address\\n    mapping(address => mapping(uint256 => Checkpoint)) public tokenCheckpoints;\\n\\n    /// @notice The number of checkpoints for each token address.\\n    mapping(address => uint256) public totalTokenCheckpoints;\\n\\n    /// @notice\\n    /// user => token => processed checkpoints\\n    mapping(address => mapping(address => uint256)) public processedCheckpoints;\\n\\n    /// @notice Last time fees were withdrawn per pool token address:\\n    /// token => time\\n    mapping(address => uint256) public lastFeeWithdrawalTime;\\n\\n    /// @notice Amount of tokens that were transferred, but not saved in checkpoints.\\n    /// token => amount\\n    mapping(address => uint96) public unprocessedAmount;\\n\\n    struct Checkpoint {\\n        uint32 blockNumber;\\n        uint32 timestamp;\\n        uint96 totalWeightedStake;\\n        uint96 numTokens;\\n    }\\n\\n    /**\\n     * @dev Add extra modifier (Reentrancy) below.\\n     * Because we cannot add any additional storage slot before this storage contract after initial deployment\\n     */\\n\\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\\n\\n    /// @dev Constant for locked guard state\\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\\n\\n    /**\\n     * @dev We use a single lock for the whole contract.\\n     */\\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\\n\\n    /**\\n     * @dev Additional storage for converter whitelist mechanism.\\n     * @dev Initialization here does not works. We need to create a separate setter & getter.\\n     * @dev Just set the visibility to internal should be fine.\\n     */\\n    EnumerableAddressSet.AddressSet internal whitelistedConverterList;\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * If you mark a function `nonReentrant`, you should also\\n     * mark it `external`. Calling one `nonReentrant` function from\\n     * another is not supported. Instead, you can implement a\\n     * `private` function doing the actual work, and an `external`\\n     * wrapper marked as `nonReentrant`.\\n     */\\n    modifier nonReentrant() {\\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \\\"nonReentrant\\\");\\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\\n        _;\\n        reentrancyLock = REENTRANCY_GUARD_FREE;\\n    }\\n}\\n\\n/* Interfaces */\\n\\ninterface IProtocol {\\n    /**\\n     *\\n     * @param tokens The array address of the token instance.\\n     * @param receiver The address of the withdrawal recipient.\\n     *\\n     * @return The withdrawn total amount in wRBTC\\n     * */\\n    function withdrawFees(address[] calldata tokens, address receiver)\\n        external\\n        returns (uint256 totalWRBTCWithdrawn);\\n\\n    function underlyingToLoanPool(address token) external view returns (address);\\n\\n    function wrbtcToken() external view returns (IWrbtcERC20);\\n\\n    function getSovTokenAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x450ad2c415fa2556c2fe7923dba2900f64c1338b3b9638d51fe2be3c5594b844\"},\"contracts/governance/IFeeSharingCollector.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\n/**\\n * @title Interface for contract governance/FeeSharingCollector/FeeSharingCollector.sol\\n * @dev Interfaces are used to cast a contract address into a callable instance.\\n * */\\ninterface IFeeSharingCollector {\\n    function withdrawFees(address[] calldata _token) external;\\n\\n    function transferTokens(address _token, uint96 _amount) external;\\n\\n    function withdraw(\\n        address _loanPoolToken,\\n        uint32 _maxCheckpoints,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7794cb434d9395ea983dcf8ded48db5b68897a338429320f60172c4caa47fb40\"},\"contracts/governance/Staking/SafeMath96.sol\":{\"content\":\"pragma solidity ^0.5.17;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath96 contract.\\n * @notice Improved Solidity's arithmetic operations with added overflow checks.\\n * @dev SafeMath96 uses uint96, unsigned integers of 96 bits length, so every\\n * integer from 0 to 2^96-1 can be operated.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * SafeMath restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this contract instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n * */\\ncontract SafeMath96 {\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe64(uint256 n, string memory errorMessage) internal pure returns (uint64) {\\n        require(n < 2**64, errorMessage);\\n        return uint64(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `+` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe addition a+b.\\n     * */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Substracts two unsigned integers, reverting on underflow.\\n     * @dev Counterpart to Solidity's `-` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on underflow.\\n     * @return The safe substraction a-b.\\n     * */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `*` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe product a*b.\\n     * */\\n    function mul96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint96 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Divides two unsigned integers, reverting on overflow.\\n     * @dev Counterpart to Solidity's `/` operator.\\n     * @param a First integer.\\n     * @param b Second integer.\\n     * @param errorMessage The revert message on overflow.\\n     * @return The safe division a/b.\\n     * */\\n    function div96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint96 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xc37b24a41212f26435849813104568112c9e151a60018f53d76c7d06e74782ce\"},\"contracts/governance/Staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.5.17;\\n\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Staking modules governance/Staking/modules\\n */\\n\\ninterface IStaking {\\n    /*************************** StakingAdminModule ***************************/\\n\\n    /**\\n     * @notice Add account to Admins ACL.\\n     * @param _admin The addresses of the account to grant permissions.\\n     * */\\n    function addAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Remove account from Admins ACL.\\n     * @param _admin The addresses of the account to revoke permissions.\\n     * */\\n    function removeAdmin(address _admin) external;\\n\\n    /**\\n     * @notice Add account to pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function addPauser(address _pauser) external;\\n\\n    /**\\n     * @notice Remove account from pausers ACL.\\n     * @param _pauser The address to grant pauser permissions.\\n     * */\\n    function removePauser(address _pauser) external;\\n\\n    /**\\n     * @notice Pause/unpause contract\\n     * @param _pause true when pausing, false when unpausing\\n     * */\\n    function pauseUnpause(bool _pause) external;\\n\\n    /**\\n     * @notice Freeze contract - disable all functions\\n     * @param _freeze true when freezing, false when unfreezing\\n     * @dev When freezing, pause is always applied too. When unfreezing, the contract is left in paused stated.\\n     * */\\n    function freezeUnfreeze(bool _freeze) external;\\n\\n    /**\\n     * @notice Allows the owner to set a fee sharing proxy contract.\\n     * We need it for unstaking with slashing.\\n     * @param _feeSharing The address of FeeSharingCollectorProxy contract.\\n     * */\\n    function setFeeSharing(address _feeSharing) external;\\n\\n    /**\\n     * @notice Allow the owner to set weight scaling.\\n     * We need it for unstaking with slashing.\\n     * @param _weightScaling The weight scaling.\\n     * */\\n    function setWeightScaling(uint96 _weightScaling) external;\\n\\n    /**\\n     * @notice Allow the owner to set a new staking contract.\\n     * As a consequence it allows the stakers to migrate their positions\\n     * to the new contract.\\n     * @dev Doesn't have any influence as long as migrateToNewStakingContract\\n     * is not implemented.\\n     * @param _newStakingContract The address of the new staking contract.\\n     * */\\n    function setNewStakingContract(address _newStakingContract) external;\\n\\n    /**\\n     * @notice Allow a staker to migrate his positions to the new staking contract.\\n     * @dev Staking contract needs to be set before by the owner.\\n     * Currently not implemented, just needed for the interface.\\n     *      In case it's needed at some point in the future,\\n     *      the implementation needs to be changed first.\\n     * */\\n    function migrateToNewStakingContract() external; // dummy - not implemented as of now\\n\\n    /*************************** StakingGovernanceModule ***************************/\\n\\n    /**\\n     * @notice Compute the total voting power at a given time.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @param time The timestamp for which to calculate the total voting power.\\n     * @return The total voting power at the given time.\\n     * */\\n    function getPriorTotalVotingPower(uint32 blockNumber, uint256 time)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Get the current votes balance for a user account.\\n     * @param account The address to get votes balance.\\n     * @dev This is a wrapper to simplify arguments. The actual computation is\\n     * performed on WeightedStaking parent contract.\\n     * @return The number of current votes for a user account.\\n     * */\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of votes for a delegatee as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will revert\\n     * to prevent misinformation.\\n     *      Used for Voting, not for fee sharing.\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The number of votes the delegatee had as of the given block.\\n     * */\\n    function getPriorVotes(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The staking date to compute the power for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorStakeByDateForDelegatee(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an unlocking date as of a block number.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     * TODO: WeightedStaking::getPriorTotalStakesForDate should probably better\\n     * be internal instead of a public function.\\n     * @param date The date to check the stakes for.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorTotalStakesForDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` which are locked until lockDate to `delegatee`.\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate the date if the position to delegate.\\n     * */\\n    function delegate(address delegatee, uint256 lockDate) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to a delegatee account.\\n     * Voting with EIP-712 Signatures.\\n     *\\n     * Voting power can be delegated to any address, and then can be used to\\n     * vote on proposals. A key benefit to users of by-signature functionality\\n     * is that they can create a signed vote transaction for free, and have a\\n     * trusted third-party spend rBTC(or ETH) on gas fees and write it to the\\n     * blockchain for them.\\n     *\\n     * The third party in this scenario, submitting the SOV-holder\\u2019s signed\\n     * transaction holds a voting power that is for only a single proposal.\\n     * The signatory still holds the power to vote on their own behalf in\\n     * the proposal if the third party has not yet published the signed\\n     * transaction that was given to them.\\n     *\\n     * @dev The signature needs to be broken up into 3 parameters, known as\\n     * v, r and s:\\n     * const r = '0x' + sig.substring(2).substring(0, 64);\\n     * const s = '0x' + sig.substring(2).substring(64, 128);\\n     * const v = '0x' + sig.substring(2).substring(128, 130);\\n     *\\n     * @param delegatee The address to delegate votes to.\\n     * @param lockDate The date until which the position is locked.\\n     * @param nonce The contract state required to match the signature.\\n     * @param expiry The time at which to expire the signature.\\n     * @param v The recovery byte of the signature.\\n     * @param r Half of the ECDSA signature pair.\\n     * @param s Half of the ECDSA signature pair.\\n     * */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 lockDate,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /*************************** StakingStakeModule ***************************/\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stake(\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake the given amount for the given duration of time.\\n     * @dev This function will be invoked from receiveApproval\\n     * @dev SOV.approveAndCall -> this.receiveApproval -> this.stakeWithApproval\\n     * @param sender The sender of SOV.approveAndCall\\n     * @param amount The number of tokens to stake.\\n     * @param until Timestamp indicating the date until which to stake.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeWithApproval(\\n        address sender,\\n        uint96 amount,\\n        uint256 until,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Receives approval from SOV token.\\n     * @param _data The data will be used for low level call.\\n     */\\n    function receiveApproval(\\n        address _sender,\\n        uint256 _amount,\\n        address _token,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @notice Extend the staking duration until the specified date.\\n     * @param previousLock The old unlocking timestamp.\\n     * @param until The new unlocking timestamp in seconds.\\n     * */\\n    function extendStakingDuration(uint256 previousLock, uint256 until) external;\\n\\n    /**\\n     * @dev DO NOT USE this misspelled function. Use stakeBySchedule function instead.\\n     * This function cannot be deprecated while we have non-upgradeable vesting contracts.\\n     * */\\n    function stakesBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Stake tokens according to the vesting schedule.\\n     * @param amount The amount of tokens to stake.\\n     * @param cliff The time interval to the first withdraw.\\n     * @param duration The staking duration.\\n     * @param intervalLength The length of each staking interval when cliff passed.\\n     * @param stakeFor The address to stake the tokens for or 0x0 if staking for oneself.\\n     * @param delegatee The address of the delegatee or 0x0 if there is none.\\n     * */\\n    function stakeBySchedule(\\n        uint256 amount,\\n        uint256 cliff,\\n        uint256 duration,\\n        uint256 intervalLength,\\n        address stakeFor,\\n        address delegatee\\n    ) external;\\n\\n    /**\\n     * @notice Get the number of staked tokens held by the user account.\\n     * @dev Iterate checkpoints adding up stakes.\\n     * @param account The address of the account to get the balance of.\\n     * @return The number of tokens held.\\n     * */\\n    function balanceOf(address account) external view returns (uint96 balance);\\n\\n    /**\\n     * @notice Get the current number of tokens staked for a day.\\n     * @param lockedTS The timestamp to get the staked tokens for.\\n     * */\\n    function getCurrentStakedUntil(uint256 lockedTS) external view returns (uint96);\\n\\n    /**\\n     * @notice Get list of stakes for a user account.\\n     * @param account The address to get stakes.\\n     * @return The arrays of dates and stakes.\\n     * */\\n    function getStakes(address account)\\n        external\\n        view\\n        returns (uint256[] memory dates, uint96[] memory stakes);\\n\\n    /**\\n     * @notice Unstaking is possible every 2 weeks only. This means, to\\n     * calculate the key value for the staking checkpoints, we need to\\n     * map the intended timestamp to the closest available date.\\n     * @param timestamp The unlocking timestamp.\\n     * @return The actual unlocking date (might be up to 2 weeks shorter than intended).\\n     * */\\n    function timestampToLockDate(uint256 timestamp) external view returns (uint256);\\n\\n    /*************************** StakingStorageModule ***************************/\\n\\n    /// @notice The maximum duration to stake tokens\\n    /// @return MAX_DURATION to stake tokens\\n    function getStorageMaxDurationToStakeTokens() external pure returns (uint256);\\n\\n    /// @notice The maximum possible voting weight before adding +1 (actually 10, but need 9 for computation).\\n    /// @return uint256(MAX_VOTING_WEIGHT);\\n    function getStorageMaxVotingWeight() external pure returns (uint256);\\n\\n    /// @notice weight is multiplied with this factor (for allowing decimals, like 1.2x).\\n    /// @dev MAX_VOTING_WEIGHT * WEIGHT_FACTOR needs to be < 792, because there are 100,000,000 SOV with 18 decimals\\n    /// @return uint256(WEIGHT_FACTOR);\\n    function getStorageWeightFactor() external pure returns (uint256);\\n\\n    /// @return uint256(DEFAULT_WEIGHT_SCALING);\\n    function getStorageDefaultWeightScaling() external pure returns (uint256);\\n\\n    /// @notice return (uint256(MIN_WEIGHT_SCALING), uint256(MAX_WEIGHT_SCALING))\\n    function getStorageRangeForWeightScaling()\\n        external\\n        pure\\n        returns (uint256 minWeightScaling, uint256 maxWeightScaling);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain.\\n    /// @return uint256(DOMAIN_TYPEHASH);\\n    function getStorageDomainTypehash() external pure returns (uint256);\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract.\\n    /// @return uint256(DELEGATION_TYPEHASH);\\n    function getStorageDelegationTypehash() external pure returns (uint256);\\n\\n    /// @return name;\\n    function getStorageName() external view returns (string memory);\\n\\n    /// AUTOGENERATED FUNCTIONS FROM THE STAKING STORAGE PUBLIC VARIABLES ///\\n\\n    /// @notice The timestamp of contract creation. Base for the staking period calculation.\\n    function kickoffTS() external view returns (uint256);\\n\\n    /// @notice The token to be staked\\n    function SOVToken() external view returns (address);\\n\\n    /// @notice Stakers delegated voting power\\n    /// @param staker - the delegating address\\n    /// @param until - delegated voting\\n    /// @return _delegate - voting power delegated to address\\n    function delegates(address staker, uint256 until) external view returns (address _delegate);\\n\\n    /// @notice If this flag is set to true, all tokens are unlocked immediately\\n    /// see function unlockAllTokens() for details\\n    function allUnlocked() external view returns (bool);\\n\\n    /// @notice Used for stake migrations to a new staking contract with a different storage structure\\n    function newStakingContract() external view returns (address);\\n\\n    /// CHECKPOINTS\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 stake;\\n    }\\n\\n    /// @notice A record of tokens to be unstaked at a given time in total.\\n    /// For total voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev totalStakingCheckpoints[date][index] is a checkpoint\\n    function totalStakingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date.\\n    /// @dev numTotalStakingCheckpoints[date] is a number.\\n    function numTotalStakingCheckpoints(uint256 date)\\n        external\\n        view\\n        returns (bytes32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which were delegated to a certain address.\\n    /// For delegatee voting power computation. Voting weights get adjusted bi-weekly.\\n    /// @dev delegateStakingCheckpoints[delegatee][date][index] is a checkpoint.\\n    function delegateStakingCheckpoints(\\n        address delagatee,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per delegate.\\n    /// @dev numDelegateStakingCheckpoints[delegatee][date] is a number.\\n    function numDelegateStakingCheckpoints(address delegatee, uint256 date)\\n        external\\n        view\\n        returns (bytes32 checkpointsQty);\\n\\n    /// @notice A record of tokens to be unstaked at a given time which per user address (address -> lockDate -> stake checkpoint)\\n    /// @dev userStakingCheckpoints[user][date][index] is a checkpoint.\\n    function userStakingCheckpoints(\\n        address user,\\n        uint256 date,\\n        uint32 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @notice The number of total staking checkpoints for each date per user.\\n    /// @dev numUserStakingCheckpoints[user][date] is a number\\n    function numUserStakingCheckpoints(address user, uint256 date)\\n        external\\n        view\\n        returns (uint32 checkpointsQty);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    /// @dev nonces[user] is a number.\\n    function nonces(address user) external view returns (uint256 nonce);\\n\\n    /// SLASHING ///\\n\\n    /// @notice the address of FeeSharingCollectorProxy contract, we need it for unstaking with slashing.\\n    function feeSharing() external view returns (address);\\n\\n    /// @notice used for weight scaling when unstaking with slashing.\\n    /// @return uint96 DEFAULT_WEIGHT_SCALING\\n    function weightScaling() external view returns (uint96);\\n\\n    /// @notice List of vesting contracts, tokens for these contracts won't be slashed if unstaked by governance.\\n    /// @dev vestingWhitelist[contract] is true/false.\\n    function vestingWhitelist(address isWhitelisted) external view returns (bool);\\n\\n    /// @dev user => flag whether user has admin role.\\n    /// @dev multisig should be an admin, admin can invoke only governanceWithdrawVesting function,\\n    /// \\tthis function works only with Team Vesting contracts\\n    function admins(address isAdmin) external view returns (bool);\\n\\n    /// @dev vesting contract code hash => flag whether it's registered code hash\\n    function vestingCodeHashes(bytes32 vestingLogicCodeHash) external view returns (bool);\\n\\n    /// @notice A record of tokens to be unstaked from vesting contract at a given time (lockDate -> vest checkpoint)\\n    /// @dev vestingCheckpoints[date][index] is a checkpoint.\\n    function vestingCheckpoints(uint256 date, uint32 index)\\n        external\\n        view\\n        returns (Checkpoint memory);\\n\\n    /// @notice The number of total vesting checkpoints for each date.\\n    /// @dev numVestingCheckpoints[date] is a number.\\n    function numVestingCheckpoints(uint256 date) external view returns (uint32 checkpointsQty);\\n\\n    ///@notice vesting registry contract PROXY address\\n    function vestingRegistryLogic() external view returns (address);\\n\\n    /// @dev user => flag whether user has pauser role.\\n    function pausers(address isPauser) external view returns (bool);\\n\\n    /// @dev Staking contract is paused\\n    function paused() external view returns (bool);\\n\\n    /// @dev Staking contract is frozen\\n    function frozen() external view returns (bool);\\n\\n    /*************************** StakingVestingModule ***************************/\\n\\n    /**\\n     * @notice Return flag whether the given address is a registered vesting contract.\\n     * @param stakerAddress the address to check\\n     */\\n    function isVestingContract(address stakerAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Remove vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function removeContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Add vesting contract's code hash to a map of code hashes.\\n     * @param vesting The address of Vesting contract.\\n     * @dev We need it to use isVestingContract() function instead of isContract()\\n     */\\n    function addContractCodeHash(address vesting) external;\\n\\n    /**\\n     * @notice Determine the prior number of vested stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorVestingStakeByDate(uint256 date, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint96);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * @param date The staking date to compute the power for. Adjusted to the next valid lock date, if necessary.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedVestingStakeByDate(\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Determine the prior weighted vested amount for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     * TODO: WeightedStaking::getPriorVestingWeightedStake is using the variable name \\\"votes\\\"\\n     * to add up token stake, and that could be misleading.\\n     *\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The staking date to compute the power for.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorVestingWeightedStake(uint256 blockNumber, uint256 date)\\n        external\\n        view\\n        returns (uint96 votes);\\n\\n    /**\\n     * @notice Determine the prior number of stake for an account until a\\n     * certain lock date as of a block number.\\n     * @dev Block number must be a finalized block or else this function\\n     * will revert to prevent misinformation.\\n     * @param account The address of the account to check.\\n     * @param date The lock date.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @return The number of votes the account had as of the given block.\\n     * */\\n    function getPriorUserStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 blockNumber\\n    ) external view returns (uint96);\\n\\n    /**\\n     * @notice Sets the users' vesting stakes for a giving lock dates and writes checkpoints.\\n     * @param lockedDates The arrays of lock dates.\\n     * @param values The array of values to add to the staked balance.\\n     */\\n    function setVestingStakes(uint256[] calldata lockedDates, uint96[] calldata values) external;\\n\\n    /**\\n     * @notice sets vesting registry\\n     * @param _vestingRegistryProxy the address of vesting registry proxy contract\\n     * @dev _vestingRegistryProxy can be set to 0 as this function can be reused by\\n     * various other functionalities without the necessity of linking it with Vesting Registry\\n     */\\n    function setVestingRegistry(address _vestingRegistryProxy) external;\\n\\n    /*************************** StakingWithdrawModule ***************************/\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens if they are unlocked.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * */\\n    function withdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw the given amount of tokens.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting\\n     * @dev **WARNING** This function should not be no longer used by Sovryn Protocol.\\n     * Sovryn protocol will use the cancelTeamVesting function for the withdrawal moving forward.\\n     * */\\n    function governanceWithdraw(\\n        uint96 amount,\\n        uint256 until,\\n        address receiver\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw tokens for vesting contract.\\n     * @param vesting The address of Vesting contract.\\n     * @param receiver The receiver of the tokens. If not specified, send to the msg.sender\\n     * @dev Can be invoked only by whitelisted contract passed to governanceWithdrawVesting.\\n     * */\\n    function governanceWithdrawVesting(address vesting, address receiver) external;\\n\\n    /**\\n     * @notice Get available and punished amount for withdrawing.\\n     * @param amount The number of tokens to withdraw.\\n     * @param until The date until which the tokens were staked.\\n     * */\\n    function getWithdrawAmounts(uint96 amount, uint256 until)\\n        external\\n        view\\n        returns (uint96, uint96);\\n\\n    /**\\n     * @notice Allow the owner to unlock all tokens in case the staking contract\\n     * is going to be replaced\\n     * Note: Not reversible on purpose. once unlocked, everything is unlocked.\\n     * The owner should not be able to just quickly unlock to withdraw his own\\n     * tokens and lock again.\\n     * @dev Last resort.\\n     * */\\n    function unlockAllTokens() external;\\n\\n    /*************************** WeightedStakingModule ***************************/\\n\\n    /**\\n     * @notice Determine the prior weighted stake for an account as of a block number.\\n     * Iterate through checkpoints adding up voting power.\\n     * @dev Block number must be a finalized block or else this function will\\n     * revert to prevent misinformation.\\n     *      Used for fee sharing, not voting.\\n     *\\n     * @param account The address of the account to check.\\n     * @param blockNumber The block number to get the vote balance at.\\n     * @param date The date/timestamp of the unstaking time.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function getPriorWeightedStake(\\n        address account,\\n        uint256 blockNumber,\\n        uint256 date\\n    ) external view returns (uint96 priorWeightedStake);\\n\\n    /**\\n     * @notice Compute the voting power for a specific date.\\n     * Power = stake * weight\\n     * TODO: WeightedStaking::weightedStakeByDate should probably better\\n     * be internal instead of a public function.\\n     * @param account The user address.\\n     * @param date The staking date to compute the power for.\\n     * @param startDate The date for which we need to know the power of the stake.\\n     * @param blockNumber The block number, needed for checkpointing.\\n     * @return The stacking power.\\n     * */\\n    function weightedStakeByDate(\\n        address account,\\n        uint256 date,\\n        uint256 startDate,\\n        uint256 blockNumber\\n    ) external view returns (uint96 power);\\n\\n    /**\\n     * @notice Compute the weight for a specific date.\\n     * @param date The unlocking date.\\n     * @param startDate We compute the weight for the tokens staked until 'date' on 'startDate'.\\n     * @return The weighted stake the account had as of the given block.\\n     * */\\n    function computeWeightByDate(uint256 date, uint256 startDate)\\n        external\\n        pure\\n        returns (uint96 weight);\\n\\n    /**\\n     * @notice Returns public constant MAX_DURATION\\n     * preserved for backwards compatibility\\n     * Use getStorageMaxDurationToStakeTokens()\\n     * @return uint96 MAX_DURATION for staking\\n     **/\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() external view returns (bool);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Governance withdraw vesting directly through staking contract.\\n     * This direct withdraw vesting solves the out of gas issue when there are too many iterations when withdrawing.\\n     * This function only allows cancelling vesting contract of the TeamVesting type.\\n     *\\n     * @param vesting The vesting address.\\n     * @param receiver The receiving address.\\n     * @param startFrom The start value for the iterations.\\n     */\\n    function cancelTeamVesting(\\n        address vesting,\\n        address receiver,\\n        uint256 startFrom\\n    ) external;\\n\\n    /**\\n     * @notice Max iteration for direct withdrawal from staking to prevent out of gas issue.\\n     *\\n     * @return max iteration value.\\n     */\\n    function getMaxVestingWithdrawIterations() external view returns (uint256);\\n\\n    /**\\n     * @dev set max withdraw iterations.\\n     *\\n     * @param maxIterations new max iterations value.\\n     */\\n    function setMaxVestingWithdrawIterations(uint256 maxIterations) external;\\n}\\n\",\"keccak256\":\"0x5d400d10ac5d54f0a1103cf34a1048e585f5c6f20be3f5192b5bc7b277e5bfb0\"},\"contracts/interfaces/IConverterAMM.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IConverterAMM {\\n    function withdrawFees(address receiver) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6e436cc3fcfb1168b5f22f3a67e329e6e210c469b4c26d11a4022a11070047a\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ncontract IERC20 {\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256);\\n\\n    function approve(address _spender, uint256 _value) public returns (bool);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xea0bb1bf7d022130bb42a4efdfd875ef76ac5ac730a94ddd7b8c9949d4253855\"},\"contracts/interfaces/IWrbtc.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\ninterface IWrbtc {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x20fdfe4b5e32fd7f863b3fa128e3c80bd4ccf090a4ffba56186ef3b7f2a80492\"},\"contracts/interfaces/IWrbtcERC20.sol\":{\"content\":\"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./IWrbtc.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract IWrbtcERC20 is IWrbtc, IERC20 {}\\n\",\"keccak256\":\"0x7301a8c8ca7aa016ec94268a16d07366875f2e406442e929968dd745b1ee5be5\"},\"contracts/mixins/EnumerableAddressSet.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Based on Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * As of v2.5.0, only `address` sets are supported.\\n *\\n * Include with `using EnumerableSet for EnumerableSet.AddressSet;`.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary EnumerableAddressSet {\\n    struct AddressSet {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) index;\\n        address[] values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        if (contains(set, value)) {\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                address lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(AddressSet storage set) internal view returns (address[] memory) {\\n        address[] memory output = new address[](set.values.length);\\n        for (uint256 i; i < set.values.length; i++) {\\n            output[i] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns a chunk of array as recommended in enumerate() to avoid running of gas.\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     \\n     * @param start start index of chunk\\n     * @param count num of element to return; if count == 0 then returns all the elements from the @param start\\n     */\\n    function enumerateChunk(\\n        AddressSet storage set,\\n        uint256 start,\\n        uint256 count\\n    ) internal view returns (address[] memory output) {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = (set.values.length < end || count == 0) ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new address[](end - start);\\n        for (uint256 i; i < end - start; i++) {\\n            output[i] = set.values[i + start];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set.values.length;\\n    }\\n\\n    /** @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function get(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set.values[index];\\n    }\\n}\\n\",\"keccak256\":\"0xea6fba941ec8502aa11a7ab37e74b917d0dc47bb254e359a2870a87ef97d9872\"},\"contracts/openzeppelin/Address.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\\n     *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x23df48a01dbac9b25e86c9131174fb7752bbc7e741e63f1aa982de22e055ad54\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7860cb1591dbd66bb497c60c46866d9fcdb56c73306ed86b25801000af1c7b2b\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x94496c375b3e82d87d7f01ce1577f008fab374312cf93012a0eca716e6aadb3a\"},\"contracts/openzeppelin/SafeERC20.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe99b4d979cb976a6b70e297600242afe38b8cd8f1b1ba6ee373f39f7abb3ca79\"},\"contracts/openzeppelin/SafeMath.sol\":{\"content\":\"pragma solidity >=0.5.0 <0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, rounding up and truncating the quotient\\n     */\\n    function divCeil(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\",\"keccak256\":\"0xbff8d6273e1a6870d1a142c0c23acd63a4dd47760f250390f49ee56333bcb6e8\"}},\"version\":1}",
  "bytecode": "0x60806040526001600855600061001c6001600160e01b0361006b16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006f565b3390565b6144d3806200007f6000396000f3fe60806040526004361061019c5760003560e01c80638ce74426116100ec578063a965b3a91161008a578063c304044711610064578063c30404471461079e578063f2962cda146107d1578063f2fde38b14610804578063f3bdba8f146108375761019c565b8063a965b3a9146106ae578063abe979e1146106f7578063adcf21a7146107395761019c565b8063988ba593116100c6578063988ba59314610574578063a4955f2a146105b3578063a697b8c7146105e6578063a9336519146106615761019c565b80638ce74426146105215780638da5cb5b146105365780638f32d59b1461054b5761019c565b806370530017116101595780637913b451116101335780637913b451146103d45780637c8678ec1461040f5780637d0ce2b2146104bd5780638b6fdcba146104d25761019c565b806370530017146102eb5780637061acf31461035c5780637104c4ff1461038f5761019c565b8063200202081461019e57806322a6fd95146101e35780633d67df6f146101eb5780633e83da07146102265780634cf088d9146102815780635c4d9b12146102b2575b005b3480156101aa57600080fd5b506101d1600480360360208110156101c157600080fd5b50356001600160a01b031661086a565b60408051918252519081900360200190f35b61019c610885565b3480156101f757600080fd5b506101d16004803603604081101561020e57600080fd5b506001600160a01b0381358116916020013516610932565b34801561023257600080fd5b506102616004803603604081101561024957600080fd5b506001600160a01b038135811691602001351661094c565b604080519384529115156020840152151582820152519081900360600190f35b34801561028d57600080fd5b50610296610ba1565b604080516001600160a01b039092168252519081900360200190f35b3480156102be57600080fd5b5061019c600480360360408110156102d557600080fd5b506001600160a01b038135169060200135610bb0565b3480156102f757600080fd5b506103246004803603604081101561030e57600080fd5b506001600160a01b038135169060200135610d4f565b6040805163ffffffff95861681529390941660208401526001600160601b039182168385015216606082015290519081900360800190f35b34801561036857600080fd5b5061019c6004803603602081101561037f57600080fd5b50356001600160a01b0316610d9a565b34801561039b57600080fd5b5061019c600480360360608110156103b257600080fd5b50803590602081013563ffffffff1690604001356001600160a01b0316610e90565b3480156103e057600080fd5b506101d1600480360360408110156103f757600080fd5b506001600160a01b0381358116916020013516611329565b34801561041b57600080fd5b5061019c6004803603602081101561043257600080fd5b810190602081018135600160201b81111561044c57600080fd5b82018360208201111561045e57600080fd5b803590602001918460208302840111600160201b8311171561047f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611346945050505050565b3480156104c957600080fd5b506102966115ba565b3480156104de57600080fd5b50610505600480360360208110156104f557600080fd5b50356001600160a01b03166115d6565b604080516001600160601b039092168252519081900360200190f35b34801561052d57600080fd5b506102966115f1565b34801561054257600080fd5b50610296611600565b34801561055757600080fd5b5061056061160f565b604080519115158252519081900360200190f35b34801561058057600080fd5b5061019c6004803603604081101561059757600080fd5b50803563ffffffff1690602001356001600160a01b0316611633565b3480156105bf57600080fd5b5061019c600480360360208110156105d657600080fd5b50356001600160a01b0316611691565b3480156105f257600080fd5b5061019c6004803603602081101561060957600080fd5b810190602081018135600160201b81111561062357600080fd5b82018360208201111561063557600080fd5b803590602001918460208302840111600160201b8311171561065657600080fd5b50909250905061172d565b34801561066d57600080fd5b5061019c6004803603608081101561068457600080fd5b506001600160a01b03813581169160208101359163ffffffff6040830135169160600135166119b5565b3480156106ba57600080fd5b5061019c600480360360608110156106d157600080fd5b506001600160a01b03813581169163ffffffff6020820135169160409091013516611e1f565b34801561070357600080fd5b5061019c6004803603604081101561071a57600080fd5b5080356001600160a01b031690602001356001600160601b0316611e7f565b34801561074557600080fd5b5061074e612139565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561078a578181015183820152602001610772565b505050509050019250505060405180910390f35b3480156107aa57600080fd5b506101d1600480360360208110156107c157600080fd5b50356001600160a01b031661214a565b3480156107dd57600080fd5b506101d1600480360360208110156107f457600080fd5b50356001600160a01b0316612191565b34801561081057600080fd5b5061019c6004803603602081101561082757600080fd5b50356001600160a01b03166121a3565b34801561084357600080fd5b506101d16004803603602081101561085a57600080fd5b50356001600160a01b03166121f7565b6001600160a01b031660009081526004602052604090205490565b346001600160601b0381166108cb5760405162461bcd60e51b815260040180806020018281038252603081526020018061408b6030913960400191505060405180910390fd5b6108ee60405180806142a860219139604051908190036021019020905082612209565b604080516001600160601b0383168152905160009133917f1b89874203ff7f0bba87c969ada3f32fda22ed38a6706d35199d21280c7811b19181900360200190a350565b6000806109418484600061234d565b509150505b92915050565b6002546040805163ca6860df60e01b81526001600160a01b03858116600483015291516000938493849391169163ca6860df91602480820192602092909190829003018186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d60208110156109c957600080fd5b5051156109de57506000915081905080610b9a565b6001600160a01b0380861660009081526005602090815260408083209388168352928152828220546004909152919020548082101580610a1c575080155b15610a3157935060009250829150610b9a9050565b6000825b82811015610b8c576000600360008a6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002090506000600260009054906101000a90046001600160a01b03166001600160a01b03166337e6b1c18c60018560000160009054906101000a900463ffffffff16038560000160049054906101000a900463ffffffff166040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018363ffffffff1681526020018263ffffffff168152602001935050505060206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d6020811015610b5557600080fd5b505190506001600160601b03811615610b8257826001018684116001985098509850505050505050610b9a565b5050600101610a35565b509094505083119150600090505b9250925092565b6002546001600160a01b031681565b610bb861160f565b610bf8576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b158015610c3d57600080fd5b505afa158015610c51573d6000803e3d6000fd5b505050506040513d6020811015610c6757600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610cb557600080fd5b505afa158015610cc9573d6000803e3d6000fd5b505050506040513d6020811015610cdf57600080fd5b5051905080831115610d2f576040805162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015290519081900360640190fd5b610d496001600160a01b038316858563ffffffff61236916565b50505050565b600360209081526000928352604080842090915290825290205463ffffffff80821691600160201b8104909116906001600160601b03600160401b8204811691600160a01b90041684565b610da261160f565b610de2576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b610deb816123bb565b610e3c576040805162461bcd60e51b815260206004820152601a60248201527f4e6f6e20636f6e7472616374206164647265737320676976656e000000000000604482015290519081900360640190fd5b610e4d60098263ffffffff6123f716565b50604080516001600160a01b0383168152905133917fe7902ff5b883e069d72db554511b4f7122428c996decf30682b312a66879668a919081900360200190a250565b823360405180806142a860219139604051908190036021019020905060018311610eeb5760405162461bcd60e51b81526004018080602001828103825260218152602001806142136021913960400191505060405180910390fd5b6001600160a01b038083166000908152600560209081526040808320938516835292905220546000198401908411610f545760405162461bcd60e51b81526004018080602001828103825260388152602001806143986038913960400191505060405180910390fd5b6001600160a01b038216600090815260046020526040902054841115610fab5760405162461bcd60e51b8152600401808060200182810382526032815260200180613f156032913960400191505060405180910390fd5b610fb3613e25565b506001600160a01b0380831660009081526003602090815260408083206000198601845282528083208151608081018352905463ffffffff808216808452600160201b83049091168386018190526001600160601b03600160401b8404811685870152600160a01b909304909216606084015260025484516337e6b1c160e01b81528b89166004820152602481019290925260448201929092529251919516926337e6b1c19260648082019391829003018186803b15801561107457600080fd5b505afa158015611088573d6000803e3d6000fd5b505050506040513d602081101561109e57600080fd5b505190506001600160601b038116156110e85760405162461bcd60e51b81526004018080602001828103825260398152602001806140bb6039913960400191505060405180910390fd5b6110f0613e25565b506001600160a01b0380851660009081526003602090815260408083208784528252918290208251608081018452905463ffffffff808216808452600160201b83049091168385018190526001600160601b03600160401b8404811685880152600160a01b909304909216606084015260025485516337e6b1c160e01b81528c88166004820152602481019290925260448201929092529351919416926337e6b1c1926064808301939192829003018186803b1580156111af57600080fd5b505afa1580156111c3573d6000803e3d6000fd5b505050506040513d60208110156111d957600080fd5b505191506001600160601b0382166112225760405162461bcd60e51b81526004018080602001828103825260358152602001806140566035913960400191505060405180910390fd5b600160085414611268576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b60026008553360009081526005602052604080822090519091908060216142a8823960408051918290036021019091206001600160a01b0316835260208301939093525001600020548a111561130e576112c98a600163ffffffff61245716565b3360009081526005602052604080822090519091908060216142a8823960408051918290036021019091206001600160a01b0316835260208301939093525001600020555b61131889896124a0565b505060016008555050505050505050565b600560209081526000928352604080842090915290825290205481565b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d60208110156113b557600080fd5b505190506113c282612825565b6000805b83518110156115825760008482815181106113dd57fe5b60200260200101516001600160a01b031663164e68de306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050506040513d602081101561146657600080fd5b50519050801561157957836001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b5050505060006114f28260405180608001604052806048815260200161400e604891396128a5565b905061151784826040518060800160405280604e8152602001613fc0604e913961293f565b935085838151811061152557fe5b60200260200101516001600160a01b0316336001600160a01b03167fd915b7f9d8d5ce11af1f5961b830d7d7c01a750927706eb0bcbf80a8827d76cc846040518082815260200191505060405180910390a3505b506001016113c6565b506001600160601b038116156115b5576115b560405180806142a860219139604051908190036021019020905082612209565b505050565b6040518060216142a88239604051908190036021019020905081565b6007602052600090815260409020546001600160601b031681565b6001546001600160a01b031681565b6000546001600160a01b031690565b600080546001600160a01b03166116246129a9565b6001600160a01b031614905090565b600160085414611679576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b600260085561168882826124a0565b50506001600855565b61169961160f565b6116d9576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b6116ea60098263ffffffff6129ad16565b50604080516001600160a01b0383168152905133917f7b8bddb144d9ebd8a4fa3f47acac7c75b34ade822d5e528a442825fa9100ffdb919081900360200190a250565b60005b8181101561179f5761175c83838381811061174757fe5b905060200201356001600160a01b03166123bb565b6117975760405162461bcd60e51b815260040180806020018281038252603a81526020018061442a603a913960400191505060405180910390fd5b600101611730565b5060015460408051630f7e7aab60e41b8152306024820181905260048201928352604482018590526000936001600160a01b03169263f7e7aab0928792879290918190606401856020860280828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b15801561182557600080fd5b505af1158015611839573d6000803e3d6000fd5b505050506040513d602081101561184f57600080fd5b50516001546040805163afe8400960e01b815290519293506000926001600160a01b039092169163afe8400991600480820192602092909190829003018186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d60208110156118c657600080fd5b50519050811561197957806001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b50505050600061195283604051806080016040528060458152602001613f7b604591396128a5565b905061197760405180806142a860219139604051908190036021019020905082612209565b505b60408051838152905133917fea588ee3c471f3c47a77b5d118007e77b1d74e5b310a8805df274aa067d2e8a6919081900360200190a250505050565b823385600183116119f75760405162461bcd60e51b81526004018080602001828103825260218152602001806142136021913960400191505060405180910390fd5b6001600160a01b038083166000908152600560209081526040808320938516835292905220546000198401908411611a605760405162461bcd60e51b81526004018080602001828103825260388152602001806143986038913960400191505060405180910390fd5b6001600160a01b038216600090815260046020526040902054841115611ab75760405162461bcd60e51b8152600401808060200182810382526032815260200180613f156032913960400191505060405180910390fd5b611abf613e25565b506001600160a01b0380831660009081526003602090815260408083206000198601845282528083208151608081018352905463ffffffff808216808452600160201b83049091168386018190526001600160601b03600160401b8404811685870152600160a01b909304909216606084015260025484516337e6b1c160e01b81528b89166004820152602481019290925260448201929092529251919516926337e6b1c19260648082019391829003018186803b158015611b8057600080fd5b505afa158015611b94573d6000803e3d6000fd5b505050506040513d6020811015611baa57600080fd5b505190506001600160601b03811615611bf45760405162461bcd60e51b81526004018080602001828103825260398152602001806140bb6039913960400191505060405180910390fd5b611bfc613e25565b506001600160a01b0380851660009081526003602090815260408083208784528252918290208251608081018452905463ffffffff808216808452600160201b83049091168385018190526001600160601b03600160401b8404811685880152600160a01b909304909216606084015260025485516337e6b1c160e01b81528c88166004820152602481019290925260448201929092529351919416926337e6b1c1926064808301939192829003018186803b158015611cbb57600080fd5b505afa158015611ccf573d6000803e3d6000fd5b505050506040513d6020811015611ce557600080fd5b505191506001600160601b038216611d2e5760405162461bcd60e51b81526004018080602001828103825260358152602001806140566035913960400191505060405180910390fd5b600160085414611d74576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b60026008553360009081526005602090815260408083206001600160a01b038f1684529091529020548a1115611e0257611db58a600163ffffffff61245716565b60056000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055505b611e0d8b8a8a612ab8565b50506001600855505050505050505050565b600160085414611e65576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b6002600855611e75838383612ab8565b5050600160085550565b6001600160a01b038216611ec45760405162461bcd60e51b8152600401808060200182810382526034815260200180613e806034913960400191505060405180910390fd5b6000816001600160601b031611611f0c5760405162461bcd60e51b8152600401808060200182810382526033815260200180613e4d6033913960400191505060405180910390fd5b604080516323b872dd60e01b81523360048201523060248201526001600160601b038316604482015290516000916001600160a01b038516916323b872dd9160648082019260209290919082900301818787803b158015611f6c57600080fd5b505af1158015611f80573d6000803e3d6000fd5b505050506040513d6020811015611f9657600080fd5b5051905080611fd65760405162461bcd60e51b815260040180806020018281038252602e81526020018061427a602e913960400191505060405180910390fd5b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d602081101561204557600080fd5b505190506001600160a01b0384811690821614156120e057806001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040180826001600160601b03168152602001915050600060405180830381600087803b1580156120ac57600080fd5b505af11580156120c0573d6000803e3d6000fd5b5050505060405180806142a8602191396040519081900360210190209450505b6120ea8484612209565b604080516001600160601b038516815290516001600160a01b0386169133917f1b89874203ff7f0bba87c969ada3f32fda22ed38a6706d35199d21280c7811b19181900360200190a350505050565b60606121456009612e8d565b905090565b60008060008061215b856000612f33565b509396509194509250612188915082905061217c858563ffffffff6130ae16565b9063ffffffff6130ae16565b95945050505050565b60046020526000908152604090205481565b6121ab61160f565b6121eb576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b6121f481613108565b50565b60066020526000908152604090205481565b6001600160a01b038216600090815260066020526040902054620151804291909103106122c2576001600160a01b03821660009081526006602090815260408083204290556007825280832054815160608101909252603b808352612285936001600160601b039092169286929091906141769083013961293f565b6001600160a01b038416600090815260076020526040902080546bffffffffffffffffffffffff1916905590506122bc83826131a8565b50612349565b6001600160a01b03821660009081526007602090815260409182902054825160808101909352604680845261230d936001600160601b0390921692859291906142c99083013961293f565b6001600160a01b038316600090815260076020526040902080546bffffffffffffffffffffffff19166001600160601b03929092169190911790555b5050565b60008061235d600086868661344b565b91509150935093915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115b5908490613782565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906123ef57508115155b949350505050565b6000612403838361393a565b61244f5750600182810180548083018083556000928352602080842090920180546001600160a01b0319166001600160a01b038716908117909155835290859052604090912055610946565b506000610946565b600061249983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613958565b9392505050565b6000806000806000806000803390506000600160009054906101000a90046001600160a01b03166001600160a01b031663afe840096040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ff57600080fd5b505afa158015612513573d6000803e3d6000fd5b505050506040513d602081101561252957600080fd5b505190506000612538826139b2565b90506001600160a01b038b1661254c57339a505b612556838d612f33565b939e50939c50909a509850909650945088156125ba576001600160a01b03831660009081526005602052604080822090518992908060216142a8823960408051918290036021019091206001600160a01b0316835260208301939093525001600020555b891561263e576001600160a01b038084166000908152600560209081526040808320938616808452939091528082208990558051632e1a7d4d60e01b8152600481018e90529051632e1a7d4d9260248084019391929182900301818387803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b505050505b87156126e3576001600160a01b0380841660009081526005602090815260408083209385168084529382528083208990558051630141abc160e21b8152306004820152602481018d9052604481018490529051630506af0493606480840194938390030190829087803b1580156126b457600080fd5b505af11580156126c8573d6000803e3d6000fd5b505050506040513d60208110156126de57600080fd5b505193505b60006126f98561217c8c8e63ffffffff6130ae16565b90506000811161273a5760405162461bcd60e51b815260040180806020018281038252603b815260200180614464603b913960400191505060405180910390fd5b6040516000906001600160a01b038e169083908381818185875af1925050503d8060008114612785576040519150601f19603f3d011682016040523d82523d6000602084013e61278a565b606091505b50509050806127ca5760405162461bcd60e51b8152600401808060200182810382526034815260200180613f476034913960400191505060405180910390fd5b8c6001600160a01b0316856001600160a01b03167fba7771603337d6821ea291d76396cf6aa3ea405141b033d8415280139c980c1d846040518082815260200191505060405180910390a35050505050505050505050505050565b60005b81518110156123495761285882828151811061284057fe5b6020026020010151600961393a90919063ffffffff16565b61289d576040805162461bcd60e51b815260206004820152601160248201527024b73b30b634b21021b7b73b32b93a32b960791b604482015290519081900360640190fd5b600101612828565b600081600160601b84106129375760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128fc5781810151838201526020016128e4565b50505050905090810190601f1680156129295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b6000838301826001600160601b0380871690831610156129a05760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b50949350505050565b3390565b60006129b9838361393a565b1561244f576001600160a01b03821660009081526020849052604090205460018401546000199182019101808214612a645760008560010182815481106129fc57fe5b6000918252602090912001546001870180546001600160a01b039092169250829185908110612a2757fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290869052604090206001830190555b6001600160a01b03841660009081526020869052604081205560018501805480612a8a57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550600191506109469050565b60008263ffffffff1611612afd5760405162461bcd60e51b81526004018080602001828103825260418152602001806141d26041913960600191505060405180910390fd5b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b158015612b4257600080fd5b505afa158015612b56573d6000803e3d6000fd5b505050506040513d6020811015612b6c57600080fd5b505190506000612b7b826139b2565b9050336001600160a01b038416612b90573393505b600080612b9e83898961234d565b915091508160001415612ca5576001600160a01b038084166000908152600560209081526040808320938c1683529290522054811115612c6e576001600160a01b038381166000908152600560209081526040808320938c1680845293825291829020548251908152908101849052815133927fd3d8b561a0f93295b4ea7e2b930d36bd7f1a38774547bf98fb66540f588217b2928290030190a36001600160a01b039283166000908152600560209081526040808320958b1683529490529290922091909155506115b5915050565b60405162461bcd60e51b815260040180806020018281038252603b815260200180613eb4603b913960400191505060405180910390fd5b6001600160a01b0380841660009081526005602090815260408083208c851680855292529091208390559085161415612d675760408051630141abc160e21b81526001600160a01b038881166004830152602482018590526000604483018190529251908b1692630506af0492606480820193602093909283900390910190829087803b158015612d3557600080fd5b505af1158015612d49573d6000803e3d6000fd5b505050506040513d6020811015612d5f57600080fd5b50612e2e9050565b876001600160a01b031663a9059cbb87846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612dc757600080fd5b505af1158015612ddb573d6000803e3d6000fd5b505050506040513d6020811015612df157600080fd5b5051612e2e5760405162461bcd60e51b81526004018080602001828103825260308152602001806143d06030913960400191505060405180910390fd5b876001600160a01b0316866001600160a01b0316336001600160a01b03167fe635adc5d0c2d7b47215ce5ed57a79c3db183a1ef414ccfc43f24f19178a630f856040518082815260200191505060405180910390a45050505050505050565b6060808260010180549050604051908082528060200260200182016040528015612ec1578160200160208202803883390190505b50905060005b6001840154811015612f2c57836001018181548110612ee257fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110612f0c57fe5b6001600160a01b0390921660209283029190910190910152600101612ec7565b5092915050565b6000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663afe840096040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8c57600080fd5b505afa158015612fa0573d6000803e3d6000fd5b505050506040513d6020811015612fb657600080fd5b505190506000612fc5826139b2565b9050612feb8a60405180806142a86021913960405190819003602101902090508b61234d565b9098509450612ffb8a838b61234d565b909750935061300b8a828b61234d565b80945081975050506130a0670de0b6b3a7640000613094836001600160a01b0316637ff9b5966040518163ffffffff1660e01b815260040160206040518083038186803b15801561305b57600080fd5b505afa15801561306f573d6000803e3d6000fd5b505050506040513d602081101561308557600080fd5b5051899063ffffffff613a7416565b9063ffffffff613acd16565b955050509295509295509295565b600082820183811015612499576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b03811661314d5760405162461bcd60e51b8152600401808060200182810382526026815260200180613eef6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006131cc436040518060800160405280604381526020016140f460439139613b0f565b905060006131f24260405180608001604052806046815260200161423460469139613b0f565b6001600160a01b03851660009081526004602052604081205491925061321c600019850142613b64565b90506000816001600160601b03161161327c576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420746f74616c57656967687465645374616b65000000000000604482015290519081900360640190fd5b6000821180156132bb57506001600160a01b03861660009081526003602090815260408083206000198601845290915290205463ffffffff8581169116145b1561332a576001600160a01b03868116600090815260036020908152604080832060001987018452909152902080546001600160601b03888116600160a01b02908516600160401b026bffffffffffffffffffffffff60401b19909216919091179092169190911790556133fa565b6040805160808101825263ffffffff868116825285811660208084019182526001600160601b038681168587019081528b8216606087019081526001600160a01b038e81166000818152600387528a81208d825287528a812099518a5498519551945163ffffffff19909916908a161767ffffffff000000001916600160201b9590991694909402979097176bffffffffffffffffffffffff60401b1916600160401b928516929092029190911716600160a01b9490921693909302179093559081526004909152206001830190555b604080516001600160601b038716815290516001600160a01b0388169133917ff61a5f2f4d0b2d871d5bf18717d08a6b0f543afa7e08dad5df1fea150f7296329181900360200190a3505050505050565b6002546040805163ca6860df60e01b81526001600160a01b03868116600483015291516000938493169163ca6860df916024808301926020929190829003018186803b15801561349a57600080fd5b505afa1580156134ae573d6000803e3d6000fd5b505050506040513d60208110156134c457600080fd5b5051156134d657506000905080613779565b6001600160a01b03808616600090815260056020908152604080832093881683529290522054808711156135075750855b6000808563ffffffff1611613534576001600160a01b03861660009081526004602052604090205461353f565b61353f828787613c9c565b6001600160a01b038716600090815260046020526040902054909150821061356e576000935091506137799050565b60008080845b8481101561376e576001600160a01b038a811660009081526003602090815260408083208584528252808320600254815483516372ec979560e01b8152600160201b90910463ffffffff1660048201529251919516926372ec97959260248082019391829003018186803b1580156135eb57600080fd5b505afa1580156135ff573d6000803e3d6000fd5b505050506040513d602081101561361557600080fd5b5051905060008582141561362a575083613713565b600260009054906101000a90046001600160a01b03166001600160a01b03166337e6b1c18f60018660000160009054906101000a900463ffffffff16038660000160049054906101000a900463ffffffff166040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018363ffffffff1681526020018263ffffffff168152602001935050505060206040518083038186803b1580156136dc57600080fd5b505afa1580156136f0573d6000803e3d6000fd5b505050506040513d602081101561370657600080fd5b5051919550909350849050835b825460009061374a906001600160601b03600160401b820481169161309491600160a01b909104811690861663ffffffff613a7416565b905061375c888263ffffffff6130ae16565b97505060019093019250613574915050565b509195509193505050505b94509492505050565b613794826001600160a01b03166123bb565b6137e5576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106138235780518252601f199092019160209182019101613804565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613885576040519150601f19603f3d011682016040523d82523d6000602084013e61388a565b606091505b5091509150816138e1576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610d49578080602001905160208110156138fd57600080fd5b5051610d495760405162461bcd60e51b815260040180806020018281038252602a815260200180614400602a913960400191505060405180910390fd5b6001600160a01b031660009081526020919091526040902054151590565b600081848411156139aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b505050900390565b600154604080516310c59ce360e11b81526001600160a01b03848116600483015291516000938493169163218b39c6916024808301926020929190829003018186803b158015613a0157600080fd5b505afa158015613a15573d6000803e3d6000fd5b505050506040513d6020811015613a2b57600080fd5b505190506001600160a01b0381166109465760405162461bcd60e51b81526004018080602001828103825260338152602001806143656033913960400191505060405180910390fd5b600082613a8357506000610946565b82820282848281613a9057fe5b04146124995760405162461bcd60e51b81526004018080602001828103825260218152602001806141b16021913960400191505060405180910390fd5b600061249983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613d5b565b600081600160201b84106129375760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b6002546040805163cdbe715560e01b815263ffffffff8516600482015260248101849052905160009283926001600160a01b039091169163cdbe715591604480820192602092909190829003018186803b158015613bc157600080fd5b505afa158015613bd5573d6000803e3d6000fd5b505050506040513d6020811015613beb57600080fd5b5051600254604080516312916bdd60e11b815263ffffffff881660048201526024810187905290519293506001600160a01b0390911691632522d7ba91604480820192602092909190829003018186803b158015613c4857600080fd5b505afa158015613c5c573d6000803e3d6000fd5b505050506040513d6020811015613c7257600080fd5b5051604080516080810190915260568082529193506123ef918491849161430f6020830139613dc0565b6001600160a01b03821660009081526004602052604081205480613cc4576000915050612499565b6000198101600063ffffffff8516613cdd575081613d1a565b613d078563ffffffff1688016040518060600160405280603f8152602001614137603f9139613b0f565b63ffffffff16905082811115613d1a5750815b6001600160a01b038616600090815260036020908152604080832085845290915290205463ffffffff1643811415613d50578291505b509695505050505050565b60008183613daa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b506000838581613db657fe5b0495945050505050565b6000836001600160601b0316836001600160601b0316111582906139aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b6040805160808101825260008082526020820181905291810182905260608101919091529056fe46656553686172696e67436f6c6c6563746f723a3a7472616e73666572546f6b656e733a20696e76616c696420616d6f756e7446656553686172696e67436f6c6c6563746f723a3a7472616e73666572546f6b656e733a20696e76616c6964206164647265737346656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a206e6f20746f6b656e7320666f72207769746864726177616c4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735f66726f6d436865636b706f696e742073686f756c64206265203c3d20746f74616c546f6b656e436865636b706f696e747346656553686172696e67436f6c6c6563746f723a3a7769746864726177524254433a205769746864726177616c206661696c656446656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a20777262746320746f6b656e20616d6f756e742065786365656473203936206269747346656553686172696e67436f6c6c6563746f723a3a776974686472617746656573414d4d3a20746f74616c20777262746320746f6b656e20616d6f756e742065786365656473203936206269747346656553686172696e67436f6c6c6563746f723a3a776974686472617746656573414d4d3a20777262746320746f6b656e20616d6f756e742065786365656473203936206269747355736572207765696768746564207374616b652073686f756c64206265203e203020617420205f66726f6d436865636b706f696e7446656553686172696e67436f6c6c6563746f723a3a7472616e73666572524254433a20696e76616c69642076616c756555736572207765696768746564207374616b652073686f756c64206265207a65726f2061742070726576696f757320636865636b706f696e7446656553686172696e67436f6c6c6563746f723a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346656553686172696e67436f6c6c6563746f723a3a77697468647261773a20636865636b706f696e7420696e6465782065786365656473203332206269747346656553686172696e67436f6c6c6563746f723a3a5f616464436865636b706f696e743a20616d6f756e7420657863656564732039362062697473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7746656553686172696e67436f6c6c6563746f723a3a77697468647261773a205f6d6178436865636b706f696e74732073686f756c6420626520706f7369746976655f66726f6d436865636b706f696e7420706172616d206d757374206265203e203146656553686172696e67436f6c6c6563746f723a3a5f7772697465436865636b706f696e743a20626c6f636b2074696d657374616d70206578636565647320333220626974735374616b696e673a3a7472616e73666572546f6b656e733a20746f6b656e207472616e73666572206661696c6564524254435f44554d4d595f414444524553535f464f525f434845434b504f494e5446656553686172696e67436f6c6c6563746f723a3a5f616464436865636b706f696e743a20756e70726f636573736564416d6f756e742065786365656473203936206269747346656553686172696e67436f6c6c6563746f723a3a5f676574546f74616c566f6c756e7461727957656967687465645374616b653a20766573746564207374616b65206578636565647320746f74616c207374616b6546656553686172696e67436f6c6c6563746f723a3a77697468647261773a206c6f616e207752425443206e6f7420666f756e645f66726f6d436865636b706f696e7420706172616d206d757374206265203e207573657250726f636573736564436865636b706f696e747346656553686172696e67436f6c6c6563746f723a3a77697468647261773a207769746864726177616c206661696c65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656446656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a20746f6b656e206973206e6f74206120636f6e747261637446656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a206e6f207262746320666f722061207769746864726177616ca265627a7a72315820c7f6527722b13471ccd15a034a20eccca41089b0e3c0c12835a6b0758000a60464736f6c63430005110032",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638ce74426116100ec578063a965b3a91161008a578063c304044711610064578063c30404471461079e578063f2962cda146107d1578063f2fde38b14610804578063f3bdba8f146108375761019c565b8063a965b3a9146106ae578063abe979e1146106f7578063adcf21a7146107395761019c565b8063988ba593116100c6578063988ba59314610574578063a4955f2a146105b3578063a697b8c7146105e6578063a9336519146106615761019c565b80638ce74426146105215780638da5cb5b146105365780638f32d59b1461054b5761019c565b806370530017116101595780637913b451116101335780637913b451146103d45780637c8678ec1461040f5780637d0ce2b2146104bd5780638b6fdcba146104d25761019c565b806370530017146102eb5780637061acf31461035c5780637104c4ff1461038f5761019c565b8063200202081461019e57806322a6fd95146101e35780633d67df6f146101eb5780633e83da07146102265780634cf088d9146102815780635c4d9b12146102b2575b005b3480156101aa57600080fd5b506101d1600480360360208110156101c157600080fd5b50356001600160a01b031661086a565b60408051918252519081900360200190f35b61019c610885565b3480156101f757600080fd5b506101d16004803603604081101561020e57600080fd5b506001600160a01b0381358116916020013516610932565b34801561023257600080fd5b506102616004803603604081101561024957600080fd5b506001600160a01b038135811691602001351661094c565b604080519384529115156020840152151582820152519081900360600190f35b34801561028d57600080fd5b50610296610ba1565b604080516001600160a01b039092168252519081900360200190f35b3480156102be57600080fd5b5061019c600480360360408110156102d557600080fd5b506001600160a01b038135169060200135610bb0565b3480156102f757600080fd5b506103246004803603604081101561030e57600080fd5b506001600160a01b038135169060200135610d4f565b6040805163ffffffff95861681529390941660208401526001600160601b039182168385015216606082015290519081900360800190f35b34801561036857600080fd5b5061019c6004803603602081101561037f57600080fd5b50356001600160a01b0316610d9a565b34801561039b57600080fd5b5061019c600480360360608110156103b257600080fd5b50803590602081013563ffffffff1690604001356001600160a01b0316610e90565b3480156103e057600080fd5b506101d1600480360360408110156103f757600080fd5b506001600160a01b0381358116916020013516611329565b34801561041b57600080fd5b5061019c6004803603602081101561043257600080fd5b810190602081018135600160201b81111561044c57600080fd5b82018360208201111561045e57600080fd5b803590602001918460208302840111600160201b8311171561047f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611346945050505050565b3480156104c957600080fd5b506102966115ba565b3480156104de57600080fd5b50610505600480360360208110156104f557600080fd5b50356001600160a01b03166115d6565b604080516001600160601b039092168252519081900360200190f35b34801561052d57600080fd5b506102966115f1565b34801561054257600080fd5b50610296611600565b34801561055757600080fd5b5061056061160f565b604080519115158252519081900360200190f35b34801561058057600080fd5b5061019c6004803603604081101561059757600080fd5b50803563ffffffff1690602001356001600160a01b0316611633565b3480156105bf57600080fd5b5061019c600480360360208110156105d657600080fd5b50356001600160a01b0316611691565b3480156105f257600080fd5b5061019c6004803603602081101561060957600080fd5b810190602081018135600160201b81111561062357600080fd5b82018360208201111561063557600080fd5b803590602001918460208302840111600160201b8311171561065657600080fd5b50909250905061172d565b34801561066d57600080fd5b5061019c6004803603608081101561068457600080fd5b506001600160a01b03813581169160208101359163ffffffff6040830135169160600135166119b5565b3480156106ba57600080fd5b5061019c600480360360608110156106d157600080fd5b506001600160a01b03813581169163ffffffff6020820135169160409091013516611e1f565b34801561070357600080fd5b5061019c6004803603604081101561071a57600080fd5b5080356001600160a01b031690602001356001600160601b0316611e7f565b34801561074557600080fd5b5061074e612139565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561078a578181015183820152602001610772565b505050509050019250505060405180910390f35b3480156107aa57600080fd5b506101d1600480360360208110156107c157600080fd5b50356001600160a01b031661214a565b3480156107dd57600080fd5b506101d1600480360360208110156107f457600080fd5b50356001600160a01b0316612191565b34801561081057600080fd5b5061019c6004803603602081101561082757600080fd5b50356001600160a01b03166121a3565b34801561084357600080fd5b506101d16004803603602081101561085a57600080fd5b50356001600160a01b03166121f7565b6001600160a01b031660009081526004602052604090205490565b346001600160601b0381166108cb5760405162461bcd60e51b815260040180806020018281038252603081526020018061408b6030913960400191505060405180910390fd5b6108ee60405180806142a860219139604051908190036021019020905082612209565b604080516001600160601b0383168152905160009133917f1b89874203ff7f0bba87c969ada3f32fda22ed38a6706d35199d21280c7811b19181900360200190a350565b6000806109418484600061234d565b509150505b92915050565b6002546040805163ca6860df60e01b81526001600160a01b03858116600483015291516000938493849391169163ca6860df91602480820192602092909190829003018186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d60208110156109c957600080fd5b5051156109de57506000915081905080610b9a565b6001600160a01b0380861660009081526005602090815260408083209388168352928152828220546004909152919020548082101580610a1c575080155b15610a3157935060009250829150610b9a9050565b6000825b82811015610b8c576000600360008a6001600160a01b03166001600160a01b03168152602001908152602001600020600083815260200190815260200160002090506000600260009054906101000a90046001600160a01b03166001600160a01b03166337e6b1c18c60018560000160009054906101000a900463ffffffff16038560000160049054906101000a900463ffffffff166040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018363ffffffff1681526020018263ffffffff168152602001935050505060206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d6020811015610b5557600080fd5b505190506001600160601b03811615610b8257826001018684116001985098509850505050505050610b9a565b5050600101610a35565b509094505083119150600090505b9250925092565b6002546001600160a01b031681565b610bb861160f565b610bf8576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b158015610c3d57600080fd5b505afa158015610c51573d6000803e3d6000fd5b505050506040513d6020811015610c6757600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015610cb557600080fd5b505afa158015610cc9573d6000803e3d6000fd5b505050506040513d6020811015610cdf57600080fd5b5051905080831115610d2f576040805162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015290519081900360640190fd5b610d496001600160a01b038316858563ffffffff61236916565b50505050565b600360209081526000928352604080842090915290825290205463ffffffff80821691600160201b8104909116906001600160601b03600160401b8204811691600160a01b90041684565b610da261160f565b610de2576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b610deb816123bb565b610e3c576040805162461bcd60e51b815260206004820152601a60248201527f4e6f6e20636f6e7472616374206164647265737320676976656e000000000000604482015290519081900360640190fd5b610e4d60098263ffffffff6123f716565b50604080516001600160a01b0383168152905133917fe7902ff5b883e069d72db554511b4f7122428c996decf30682b312a66879668a919081900360200190a250565b823360405180806142a860219139604051908190036021019020905060018311610eeb5760405162461bcd60e51b81526004018080602001828103825260218152602001806142136021913960400191505060405180910390fd5b6001600160a01b038083166000908152600560209081526040808320938516835292905220546000198401908411610f545760405162461bcd60e51b81526004018080602001828103825260388152602001806143986038913960400191505060405180910390fd5b6001600160a01b038216600090815260046020526040902054841115610fab5760405162461bcd60e51b8152600401808060200182810382526032815260200180613f156032913960400191505060405180910390fd5b610fb3613e25565b506001600160a01b0380831660009081526003602090815260408083206000198601845282528083208151608081018352905463ffffffff808216808452600160201b83049091168386018190526001600160601b03600160401b8404811685870152600160a01b909304909216606084015260025484516337e6b1c160e01b81528b89166004820152602481019290925260448201929092529251919516926337e6b1c19260648082019391829003018186803b15801561107457600080fd5b505afa158015611088573d6000803e3d6000fd5b505050506040513d602081101561109e57600080fd5b505190506001600160601b038116156110e85760405162461bcd60e51b81526004018080602001828103825260398152602001806140bb6039913960400191505060405180910390fd5b6110f0613e25565b506001600160a01b0380851660009081526003602090815260408083208784528252918290208251608081018452905463ffffffff808216808452600160201b83049091168385018190526001600160601b03600160401b8404811685880152600160a01b909304909216606084015260025485516337e6b1c160e01b81528c88166004820152602481019290925260448201929092529351919416926337e6b1c1926064808301939192829003018186803b1580156111af57600080fd5b505afa1580156111c3573d6000803e3d6000fd5b505050506040513d60208110156111d957600080fd5b505191506001600160601b0382166112225760405162461bcd60e51b81526004018080602001828103825260358152602001806140566035913960400191505060405180910390fd5b600160085414611268576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b60026008553360009081526005602052604080822090519091908060216142a8823960408051918290036021019091206001600160a01b0316835260208301939093525001600020548a111561130e576112c98a600163ffffffff61245716565b3360009081526005602052604080822090519091908060216142a8823960408051918290036021019091206001600160a01b0316835260208301939093525001600020555b61131889896124a0565b505060016008555050505050505050565b600560209081526000928352604080842090915290825290205481565b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d60208110156113b557600080fd5b505190506113c282612825565b6000805b83518110156115825760008482815181106113dd57fe5b60200260200101516001600160a01b031663164e68de306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050602060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b505050506040513d602081101561146657600080fd5b50519050801561157957836001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156114b657600080fd5b505af11580156114ca573d6000803e3d6000fd5b5050505060006114f28260405180608001604052806048815260200161400e604891396128a5565b905061151784826040518060800160405280604e8152602001613fc0604e913961293f565b935085838151811061152557fe5b60200260200101516001600160a01b0316336001600160a01b03167fd915b7f9d8d5ce11af1f5961b830d7d7c01a750927706eb0bcbf80a8827d76cc846040518082815260200191505060405180910390a3505b506001016113c6565b506001600160601b038116156115b5576115b560405180806142a860219139604051908190036021019020905082612209565b505050565b6040518060216142a88239604051908190036021019020905081565b6007602052600090815260409020546001600160601b031681565b6001546001600160a01b031681565b6000546001600160a01b031690565b600080546001600160a01b03166116246129a9565b6001600160a01b031614905090565b600160085414611679576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b600260085561168882826124a0565b50506001600855565b61169961160f565b6116d9576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b6116ea60098263ffffffff6129ad16565b50604080516001600160a01b0383168152905133917f7b8bddb144d9ebd8a4fa3f47acac7c75b34ade822d5e528a442825fa9100ffdb919081900360200190a250565b60005b8181101561179f5761175c83838381811061174757fe5b905060200201356001600160a01b03166123bb565b6117975760405162461bcd60e51b815260040180806020018281038252603a81526020018061442a603a913960400191505060405180910390fd5b600101611730565b5060015460408051630f7e7aab60e41b8152306024820181905260048201928352604482018590526000936001600160a01b03169263f7e7aab0928792879290918190606401856020860280828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b15801561182557600080fd5b505af1158015611839573d6000803e3d6000fd5b505050506040513d602081101561184f57600080fd5b50516001546040805163afe8400960e01b815290519293506000926001600160a01b039092169163afe8400991600480820192602092909190829003018186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d60208110156118c657600080fd5b50519050811561197957806001600160a01b0316632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b50505050600061195283604051806080016040528060458152602001613f7b604591396128a5565b905061197760405180806142a860219139604051908190036021019020905082612209565b505b60408051838152905133917fea588ee3c471f3c47a77b5d118007e77b1d74e5b310a8805df274aa067d2e8a6919081900360200190a250505050565b823385600183116119f75760405162461bcd60e51b81526004018080602001828103825260218152602001806142136021913960400191505060405180910390fd5b6001600160a01b038083166000908152600560209081526040808320938516835292905220546000198401908411611a605760405162461bcd60e51b81526004018080602001828103825260388152602001806143986038913960400191505060405180910390fd5b6001600160a01b038216600090815260046020526040902054841115611ab75760405162461bcd60e51b8152600401808060200182810382526032815260200180613f156032913960400191505060405180910390fd5b611abf613e25565b506001600160a01b0380831660009081526003602090815260408083206000198601845282528083208151608081018352905463ffffffff808216808452600160201b83049091168386018190526001600160601b03600160401b8404811685870152600160a01b909304909216606084015260025484516337e6b1c160e01b81528b89166004820152602481019290925260448201929092529251919516926337e6b1c19260648082019391829003018186803b158015611b8057600080fd5b505afa158015611b94573d6000803e3d6000fd5b505050506040513d6020811015611baa57600080fd5b505190506001600160601b03811615611bf45760405162461bcd60e51b81526004018080602001828103825260398152602001806140bb6039913960400191505060405180910390fd5b611bfc613e25565b506001600160a01b0380851660009081526003602090815260408083208784528252918290208251608081018452905463ffffffff808216808452600160201b83049091168385018190526001600160601b03600160401b8404811685880152600160a01b909304909216606084015260025485516337e6b1c160e01b81528c88166004820152602481019290925260448201929092529351919416926337e6b1c1926064808301939192829003018186803b158015611cbb57600080fd5b505afa158015611ccf573d6000803e3d6000fd5b505050506040513d6020811015611ce557600080fd5b505191506001600160601b038216611d2e5760405162461bcd60e51b81526004018080602001828103825260358152602001806140566035913960400191505060405180910390fd5b600160085414611d74576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b60026008553360009081526005602090815260408083206001600160a01b038f1684529091529020548a1115611e0257611db58a600163ffffffff61245716565b60056000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055505b611e0d8b8a8a612ab8565b50506001600855505050505050505050565b600160085414611e65576040805162461bcd60e51b815260206004820152600c60248201526b1b9bdb9499595b9d1c985b9d60a21b604482015290519081900360640190fd5b6002600855611e75838383612ab8565b5050600160085550565b6001600160a01b038216611ec45760405162461bcd60e51b8152600401808060200182810382526034815260200180613e806034913960400191505060405180910390fd5b6000816001600160601b031611611f0c5760405162461bcd60e51b8152600401808060200182810382526033815260200180613e4d6033913960400191505060405180910390fd5b604080516323b872dd60e01b81523360048201523060248201526001600160601b038316604482015290516000916001600160a01b038516916323b872dd9160648082019260209290919082900301818787803b158015611f6c57600080fd5b505af1158015611f80573d6000803e3d6000fd5b505050506040513d6020811015611f9657600080fd5b5051905080611fd65760405162461bcd60e51b815260040180806020018281038252602e81526020018061427a602e913960400191505060405180910390fd5b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d602081101561204557600080fd5b505190506001600160a01b0384811690821614156120e057806001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040180826001600160601b03168152602001915050600060405180830381600087803b1580156120ac57600080fd5b505af11580156120c0573d6000803e3d6000fd5b5050505060405180806142a8602191396040519081900360210190209450505b6120ea8484612209565b604080516001600160601b038516815290516001600160a01b0386169133917f1b89874203ff7f0bba87c969ada3f32fda22ed38a6706d35199d21280c7811b19181900360200190a350505050565b60606121456009612e8d565b905090565b60008060008061215b856000612f33565b509396509194509250612188915082905061217c858563ffffffff6130ae16565b9063ffffffff6130ae16565b95945050505050565b60046020526000908152604090205481565b6121ab61160f565b6121eb576040805162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b6121f481613108565b50565b60066020526000908152604090205481565b6001600160a01b038216600090815260066020526040902054620151804291909103106122c2576001600160a01b03821660009081526006602090815260408083204290556007825280832054815160608101909252603b808352612285936001600160601b039092169286929091906141769083013961293f565b6001600160a01b038416600090815260076020526040902080546bffffffffffffffffffffffff1916905590506122bc83826131a8565b50612349565b6001600160a01b03821660009081526007602090815260409182902054825160808101909352604680845261230d936001600160601b0390921692859291906142c99083013961293f565b6001600160a01b038316600090815260076020526040902080546bffffffffffffffffffffffff19166001600160601b03929092169190911790555b5050565b60008061235d600086868661344b565b91509150935093915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115b5908490613782565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906123ef57508115155b949350505050565b6000612403838361393a565b61244f5750600182810180548083018083556000928352602080842090920180546001600160a01b0319166001600160a01b038716908117909155835290859052604090912055610946565b506000610946565b600061249983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613958565b9392505050565b6000806000806000806000803390506000600160009054906101000a90046001600160a01b03166001600160a01b031663afe840096040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ff57600080fd5b505afa158015612513573d6000803e3d6000fd5b505050506040513d602081101561252957600080fd5b505190506000612538826139b2565b90506001600160a01b038b1661254c57339a505b612556838d612f33565b939e50939c50909a509850909650945088156125ba576001600160a01b03831660009081526005602052604080822090518992908060216142a8823960408051918290036021019091206001600160a01b0316835260208301939093525001600020555b891561263e576001600160a01b038084166000908152600560209081526040808320938616808452939091528082208990558051632e1a7d4d60e01b8152600481018e90529051632e1a7d4d9260248084019391929182900301818387803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b505050505b87156126e3576001600160a01b0380841660009081526005602090815260408083209385168084529382528083208990558051630141abc160e21b8152306004820152602481018d9052604481018490529051630506af0493606480840194938390030190829087803b1580156126b457600080fd5b505af11580156126c8573d6000803e3d6000fd5b505050506040513d60208110156126de57600080fd5b505193505b60006126f98561217c8c8e63ffffffff6130ae16565b90506000811161273a5760405162461bcd60e51b815260040180806020018281038252603b815260200180614464603b913960400191505060405180910390fd5b6040516000906001600160a01b038e169083908381818185875af1925050503d8060008114612785576040519150601f19603f3d011682016040523d82523d6000602084013e61278a565b606091505b50509050806127ca5760405162461bcd60e51b8152600401808060200182810382526034815260200180613f476034913960400191505060405180910390fd5b8c6001600160a01b0316856001600160a01b03167fba7771603337d6821ea291d76396cf6aa3ea405141b033d8415280139c980c1d846040518082815260200191505060405180910390a35050505050505050505050505050565b60005b81518110156123495761285882828151811061284057fe5b6020026020010151600961393a90919063ffffffff16565b61289d576040805162461bcd60e51b815260206004820152601160248201527024b73b30b634b21021b7b73b32b93a32b960791b604482015290519081900360640190fd5b600101612828565b600081600160601b84106129375760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156128fc5781810151838201526020016128e4565b50505050905090810190601f1680156129295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b6000838301826001600160601b0380871690831610156129a05760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b50949350505050565b3390565b60006129b9838361393a565b1561244f576001600160a01b03821660009081526020849052604090205460018401546000199182019101808214612a645760008560010182815481106129fc57fe5b6000918252602090912001546001870180546001600160a01b039092169250829185908110612a2757fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905592909116815290869052604090206001830190555b6001600160a01b03841660009081526020869052604081205560018501805480612a8a57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550600191506109469050565b60008263ffffffff1611612afd5760405162461bcd60e51b81526004018080602001828103825260418152602001806141d26041913960600191505060405180910390fd5b6001546040805163afe8400960e01b815290516000926001600160a01b03169163afe84009916004808301926020929190829003018186803b158015612b4257600080fd5b505afa158015612b56573d6000803e3d6000fd5b505050506040513d6020811015612b6c57600080fd5b505190506000612b7b826139b2565b9050336001600160a01b038416612b90573393505b600080612b9e83898961234d565b915091508160001415612ca5576001600160a01b038084166000908152600560209081526040808320938c1683529290522054811115612c6e576001600160a01b038381166000908152600560209081526040808320938c1680845293825291829020548251908152908101849052815133927fd3d8b561a0f93295b4ea7e2b930d36bd7f1a38774547bf98fb66540f588217b2928290030190a36001600160a01b039283166000908152600560209081526040808320958b1683529490529290922091909155506115b5915050565b60405162461bcd60e51b815260040180806020018281038252603b815260200180613eb4603b913960400191505060405180910390fd5b6001600160a01b0380841660009081526005602090815260408083208c851680855292529091208390559085161415612d675760408051630141abc160e21b81526001600160a01b038881166004830152602482018590526000604483018190529251908b1692630506af0492606480820193602093909283900390910190829087803b158015612d3557600080fd5b505af1158015612d49573d6000803e3d6000fd5b505050506040513d6020811015612d5f57600080fd5b50612e2e9050565b876001600160a01b031663a9059cbb87846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612dc757600080fd5b505af1158015612ddb573d6000803e3d6000fd5b505050506040513d6020811015612df157600080fd5b5051612e2e5760405162461bcd60e51b81526004018080602001828103825260308152602001806143d06030913960400191505060405180910390fd5b876001600160a01b0316866001600160a01b0316336001600160a01b03167fe635adc5d0c2d7b47215ce5ed57a79c3db183a1ef414ccfc43f24f19178a630f856040518082815260200191505060405180910390a45050505050505050565b6060808260010180549050604051908082528060200260200182016040528015612ec1578160200160208202803883390190505b50905060005b6001840154811015612f2c57836001018181548110612ee257fe5b9060005260206000200160009054906101000a90046001600160a01b0316828281518110612f0c57fe5b6001600160a01b0390921660209283029190910190910152600101612ec7565b5092915050565b6000806000806000806000600160009054906101000a90046001600160a01b03166001600160a01b031663afe840096040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8c57600080fd5b505afa158015612fa0573d6000803e3d6000fd5b505050506040513d6020811015612fb657600080fd5b505190506000612fc5826139b2565b9050612feb8a60405180806142a86021913960405190819003602101902090508b61234d565b9098509450612ffb8a838b61234d565b909750935061300b8a828b61234d565b80945081975050506130a0670de0b6b3a7640000613094836001600160a01b0316637ff9b5966040518163ffffffff1660e01b815260040160206040518083038186803b15801561305b57600080fd5b505afa15801561306f573d6000803e3d6000fd5b505050506040513d602081101561308557600080fd5b5051899063ffffffff613a7416565b9063ffffffff613acd16565b955050509295509295509295565b600082820183811015612499576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b03811661314d5760405162461bcd60e51b8152600401808060200182810382526026815260200180613eef6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006131cc436040518060800160405280604381526020016140f460439139613b0f565b905060006131f24260405180608001604052806046815260200161423460469139613b0f565b6001600160a01b03851660009081526004602052604081205491925061321c600019850142613b64565b90506000816001600160601b03161161327c576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420746f74616c57656967687465645374616b65000000000000604482015290519081900360640190fd5b6000821180156132bb57506001600160a01b03861660009081526003602090815260408083206000198601845290915290205463ffffffff8581169116145b1561332a576001600160a01b03868116600090815260036020908152604080832060001987018452909152902080546001600160601b03888116600160a01b02908516600160401b026bffffffffffffffffffffffff60401b19909216919091179092169190911790556133fa565b6040805160808101825263ffffffff868116825285811660208084019182526001600160601b038681168587019081528b8216606087019081526001600160a01b038e81166000818152600387528a81208d825287528a812099518a5498519551945163ffffffff19909916908a161767ffffffff000000001916600160201b9590991694909402979097176bffffffffffffffffffffffff60401b1916600160401b928516929092029190911716600160a01b9490921693909302179093559081526004909152206001830190555b604080516001600160601b038716815290516001600160a01b0388169133917ff61a5f2f4d0b2d871d5bf18717d08a6b0f543afa7e08dad5df1fea150f7296329181900360200190a3505050505050565b6002546040805163ca6860df60e01b81526001600160a01b03868116600483015291516000938493169163ca6860df916024808301926020929190829003018186803b15801561349a57600080fd5b505afa1580156134ae573d6000803e3d6000fd5b505050506040513d60208110156134c457600080fd5b5051156134d657506000905080613779565b6001600160a01b03808616600090815260056020908152604080832093881683529290522054808711156135075750855b6000808563ffffffff1611613534576001600160a01b03861660009081526004602052604090205461353f565b61353f828787613c9c565b6001600160a01b038716600090815260046020526040902054909150821061356e576000935091506137799050565b60008080845b8481101561376e576001600160a01b038a811660009081526003602090815260408083208584528252808320600254815483516372ec979560e01b8152600160201b90910463ffffffff1660048201529251919516926372ec97959260248082019391829003018186803b1580156135eb57600080fd5b505afa1580156135ff573d6000803e3d6000fd5b505050506040513d602081101561361557600080fd5b5051905060008582141561362a575083613713565b600260009054906101000a90046001600160a01b03166001600160a01b03166337e6b1c18f60018660000160009054906101000a900463ffffffff16038660000160049054906101000a900463ffffffff166040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b031681526020018363ffffffff1681526020018263ffffffff168152602001935050505060206040518083038186803b1580156136dc57600080fd5b505afa1580156136f0573d6000803e3d6000fd5b505050506040513d602081101561370657600080fd5b5051919550909350849050835b825460009061374a906001600160601b03600160401b820481169161309491600160a01b909104811690861663ffffffff613a7416565b905061375c888263ffffffff6130ae16565b97505060019093019250613574915050565b509195509193505050505b94509492505050565b613794826001600160a01b03166123bb565b6137e5576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106138235780518252601f199092019160209182019101613804565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613885576040519150601f19603f3d011682016040523d82523d6000602084013e61388a565b606091505b5091509150816138e1576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610d49578080602001905160208110156138fd57600080fd5b5051610d495760405162461bcd60e51b815260040180806020018281038252602a815260200180614400602a913960400191505060405180910390fd5b6001600160a01b031660009081526020919091526040902054151590565b600081848411156139aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b505050900390565b600154604080516310c59ce360e11b81526001600160a01b03848116600483015291516000938493169163218b39c6916024808301926020929190829003018186803b158015613a0157600080fd5b505afa158015613a15573d6000803e3d6000fd5b505050506040513d6020811015613a2b57600080fd5b505190506001600160a01b0381166109465760405162461bcd60e51b81526004018080602001828103825260338152602001806143656033913960400191505060405180910390fd5b600082613a8357506000610946565b82820282848281613a9057fe5b04146124995760405162461bcd60e51b81526004018080602001828103825260218152602001806141b16021913960400191505060405180910390fd5b600061249983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613d5b565b600081600160201b84106129375760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b6002546040805163cdbe715560e01b815263ffffffff8516600482015260248101849052905160009283926001600160a01b039091169163cdbe715591604480820192602092909190829003018186803b158015613bc157600080fd5b505afa158015613bd5573d6000803e3d6000fd5b505050506040513d6020811015613beb57600080fd5b5051600254604080516312916bdd60e11b815263ffffffff881660048201526024810187905290519293506001600160a01b0390911691632522d7ba91604480820192602092909190829003018186803b158015613c4857600080fd5b505afa158015613c5c573d6000803e3d6000fd5b505050506040513d6020811015613c7257600080fd5b5051604080516080810190915260568082529193506123ef918491849161430f6020830139613dc0565b6001600160a01b03821660009081526004602052604081205480613cc4576000915050612499565b6000198101600063ffffffff8516613cdd575081613d1a565b613d078563ffffffff1688016040518060600160405280603f8152602001614137603f9139613b0f565b63ffffffff16905082811115613d1a5750815b6001600160a01b038616600090815260036020908152604080832085845290915290205463ffffffff1643811415613d50578291505b509695505050505050565b60008183613daa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b506000838581613db657fe5b0495945050505050565b6000836001600160601b0316836001600160601b0316111582906139aa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156128fc5781810151838201526020016128e4565b6040805160808101825260008082526020820181905291810182905260608101919091529056fe46656553686172696e67436f6c6c6563746f723a3a7472616e73666572546f6b656e733a20696e76616c696420616d6f756e7446656553686172696e67436f6c6c6563746f723a3a7472616e73666572546f6b656e733a20696e76616c6964206164647265737346656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a206e6f20746f6b656e7320666f72207769746864726177616c4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735f66726f6d436865636b706f696e742073686f756c64206265203c3d20746f74616c546f6b656e436865636b706f696e747346656553686172696e67436f6c6c6563746f723a3a7769746864726177524254433a205769746864726177616c206661696c656446656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a20777262746320746f6b656e20616d6f756e742065786365656473203936206269747346656553686172696e67436f6c6c6563746f723a3a776974686472617746656573414d4d3a20746f74616c20777262746320746f6b656e20616d6f756e742065786365656473203936206269747346656553686172696e67436f6c6c6563746f723a3a776974686472617746656573414d4d3a20777262746320746f6b656e20616d6f756e742065786365656473203936206269747355736572207765696768746564207374616b652073686f756c64206265203e203020617420205f66726f6d436865636b706f696e7446656553686172696e67436f6c6c6563746f723a3a7472616e73666572524254433a20696e76616c69642076616c756555736572207765696768746564207374616b652073686f756c64206265207a65726f2061742070726576696f757320636865636b706f696e7446656553686172696e67436f6c6c6563746f723a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346656553686172696e67436f6c6c6563746f723a3a77697468647261773a20636865636b706f696e7420696e6465782065786365656473203332206269747346656553686172696e67436f6c6c6563746f723a3a5f616464436865636b706f696e743a20616d6f756e7420657863656564732039362062697473536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7746656553686172696e67436f6c6c6563746f723a3a77697468647261773a205f6d6178436865636b706f696e74732073686f756c6420626520706f7369746976655f66726f6d436865636b706f696e7420706172616d206d757374206265203e203146656553686172696e67436f6c6c6563746f723a3a5f7772697465436865636b706f696e743a20626c6f636b2074696d657374616d70206578636565647320333220626974735374616b696e673a3a7472616e73666572546f6b656e733a20746f6b656e207472616e73666572206661696c6564524254435f44554d4d595f414444524553535f464f525f434845434b504f494e5446656553686172696e67436f6c6c6563746f723a3a5f616464436865636b706f696e743a20756e70726f636573736564416d6f756e742065786365656473203936206269747346656553686172696e67436f6c6c6563746f723a3a5f676574546f74616c566f6c756e7461727957656967687465645374616b653a20766573746564207374616b65206578636565647320746f74616c207374616b6546656553686172696e67436f6c6c6563746f723a3a77697468647261773a206c6f616e207752425443206e6f7420666f756e645f66726f6d436865636b706f696e7420706172616d206d757374206265203e207573657250726f636573736564436865636b706f696e747346656553686172696e67436f6c6c6563746f723a3a77697468647261773a207769746864726177616c206661696c65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656446656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a20746f6b656e206973206e6f74206120636f6e747261637446656553686172696e67436f6c6c6563746f723a3a7769746864726177466565733a206e6f207262746320666f722061207769746864726177616ca265627a7a72315820c7f6527722b13471ccd15a034a20eccca41089b0e3c0c12835a6b0758000a60464736f6c63430005110032",
  "devdoc": {
    "methods": {
      "addWhitelistedConverterAddress(address)": {
        "details": "Whitelisting converter address.",
        "params": {
          "converterAddress": "converter address to be whitelisted."
        }
      },
      "getAccumulatedFees(address,address)": {
        "params": {
          "_token": "RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.",
          "_user": "The address of the user or contract."
        },
        "return": "The accumulated fee for the message sender."
      },
      "getAccumulatedRBTCFeeBalances(address)": {
        "details": "view function that calculate the total RBTC that includes: - RBTC - WRBTC - iWRBTC * iWRBTC.tokenPrice()",
        "params": {
          "_user": "address of the user."
        },
        "return": "rbtc balance of the given user's address."
      },
      "getNextPositiveUserCheckpoint(address,address)": {
        "details": "Returns first user's checkpoint with weighted stake > 0",
        "params": {
          "_token": "RBTC dummy to fit into existing data structure or SOV. Former address of the pool token.",
          "_user": "The address of the user or contract."
        },
        "return": "Checkpoint number where user's weighted stake > 0"
      },
      "getWhitelistedConverterList()": {
        "return": "All of the whitelisted converter list."
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "numTokenCheckpoints(address)": {
        "details": "This getter function `numTokenCheckpoints` is added for backwards compatibility     broken when renamed `numTokenCheckpoints` storage variable to `totalTokenCheckpoints`.",
        "params": {
          "_token": "token address to get checkpoints for"
        },
        "return": "Total token checkpoints"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeWhitelistedConverterAddress(address)": {
        "details": "Removing converter address from whitelist.",
        "params": {
          "converterAddress": "converter address to be removed from whitelist."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferRBTC()": {
        "details": "We just write checkpoint here (based on the rbtc value that is sent) in a separate methods in order to prevent adding checkpoints too often."
      },
      "transferTokens(address,uint96)": {
        "details": "We just update amount of tokens here and write checkpoint in a separate methods in order to prevent adding checkpoints too often.",
        "params": {
          "_amount": "Amount to be transferred.",
          "_token": "Address of the token."
        }
      },
      "withdraw(address,uint32,address)": {
        "params": {
          "_maxCheckpoints": "Maximum number of checkpoints to be processed. Must be positive value.",
          "_receiver": "The receiver of tokens or msg.sender",
          "_token": "RBTC dummy to fit into existing data structure or SOV. Former address of the pool token."
        }
      },
      "withdrawFees(address[])": {
        "params": {
          "_tokens": "array address of the token"
        }
      },
      "withdrawFeesAMM(address[])": {
        "params": {
          "_converters": "array addresses of the converters"
        }
      },
      "withdrawRBTC(uint32,address)": {
        "details": "withdraw all of the RBTC balance based on particular checkpoints     * RBTC balance consists of: - rbtc balance - wrbtc balance which will be unwrapped to rbtc - iwrbtc balance which will be unwrapped to rbtc",
        "params": {
          "_maxCheckpoints": "Maximum number of checkpoints to be processed to workaround block gas limit",
          "_receiver": "An optional tokens receiver (msg.sender used if 0)"
        }
      },
      "withdrawRBTCStartingFromCheckpoint(uint256,uint32,address)": {
        "details": "Withdraw all of the RBTC balance based starting from a specific checkpoint The function was designed to skip checkpoints with no fees for users     * RBTC balance consists of: - rbtc balance - wrbtc balance which will be unwrapped to rbtc - iwrbtc balance which will be unwrapped to rbtcWARNING! This function skips all the checkpoints before '_fromCheckpoint' irreversibly, use with care",
        "params": {
          "_fromCheckpoint": "Skips all the checkpoints before '_fromCheckpoint'       should be calculated offchain with getNextPositiveUserCheckpoint function",
          "_maxCheckpoints": "Maximum number of checkpoints to be processed to workaround block gas limit",
          "_receiver": "An optional tokens receiver (msg.sender used if 0)"
        }
      },
      "withdrawStartingFromCheckpoint(address,uint256,uint32,address)": {
        "details": "WARNING! This function skips all the checkpoints before '_fromCheckpoint' irreversibly, use with care",
        "params": {
          "_fromCheckpoint": "Skips all the checkpoints before '_fromCheckpoint'       should be calculated offchain with getNextPositiveUserCheckpoint function",
          "_maxCheckpoints": "Maximum number of checkpoints to be processed.",
          "_receiver": "The receiver of tokens or msg.sender",
          "_token": "RBTC dummy to fit into existing data structure or SOV. Former address of the pool token."
        }
      }
    },
    "title": "The FeeSharingCollector contract."
  },
  "userdoc": {
    "methods": {
      "getAccumulatedFees(address,address)": {
        "notice": "Get the accumulated loan pool fee of the message sender."
      },
      "getWhitelistedConverterList()": {
        "notice": "Getter to query all of the whitelisted converter."
      },
      "transferRBTC()": {
        "notice": "Transfer RBTC / native tokens to this contract."
      },
      "transferTokens(address,uint96)": {
        "notice": "Transfer tokens to this contract."
      },
      "withdraw(address,uint32,address)": {
        "notice": "Withdraw accumulated fee to the message sender.     * The Sovryn protocol collects fees on every trade/swap and loan. These fees will be distributed to SOV stakers based on their voting power as a percentage of total voting power. Therefore, staking more SOV and/or staking for longer will increase your share of the fees generated, meaning you will earn more from staking.     * This function will directly burnToBTC and use the msg.sender (user) as the receiver"
      },
      "withdrawFees(address[])": {
        "notice": "Withdraw fees for the given token: lendingFee + tradingFee + borrowingFee the fees (except SOV) will be converted in wRBTC form, and then will be transferred to wRBTC loan pool. For SOV, it will be directly deposited into the feeSharingCollector from the protocol."
      },
      "withdrawFeesAMM(address[])": {
        "notice": "Withdraw amm fees for the given converter addresses: protocolFee from the conversion the fees will be converted in wRBTC form, and then will be transferred to wRBTC loan pool"
      },
      "withdrawStartingFromCheckpoint(address,uint256,uint32,address)": {
        "notice": "Withdraw accumulated fee to the message sender/receiver.     * The Sovryn protocol collects fees on every trade/swap and loan. These fees will be distributed to SOV stakers based on their voting power as a percentage of total voting power.     * This function will directly burnToBTC and use the msg.sender (user) as the receiver"
      }
    },
    "notice": "This contract withdraws fees to be paid to SOV Stakers from the protocol. Stakers call withdraw() to get their share of the fees.Staking is not only granting voting rights, but also access to fee sharing according to the own voting power in relation to the total. Whenever somebody decides to collect the fees from the protocol, they get transferred to a proxy contract which invests the funds in the lending pool and keeps the pool tokens. * The fee sharing proxy will be set as feesController of the protocol contract. This allows the fee sharing proxy to withdraw the fees. The fee sharing proxy holds the pool tokens and keeps track of which user owns how many tokens. In order to know how many tokens a user owns, the fee sharing proxy needs to know the user’s weighted stake in relation to the total weighted stake (aka total voting power). * Because both values are subject to change, they may be different on each fee withdrawal. To be able to calculate a user’s share of tokens when he wants to withdraw, we need checkpoints. * This contract is intended to be set as the protocol fee collector. Anybody can invoke the withdrawFees function which uses protocol.withdrawFees to obtain available fees from operations on a certain token. These fees are deposited in the corresponding loanPool. Also, the staking contract sends slashed tokens to this contract. When a user calls the withdraw function, the contract transfers the fee sharing rewards in proportion to the user’s weighted stake since the last withdrawal. * The protocol initially collects fees in all tokens. Then the FeeSharingCollector wihtdraws fees from the protocol. When the fees are withdrawn all the tokens except SOV will be converted to wRBTC and then transferred to wRBTC loan pool. For SOV, it will be directly deposited into the feeSharingCollector from the protocol."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53255,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14388,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "protocol",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IProtocol)14482"
      },
      {
        "astId": 14390,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStaking)16821"
      },
      {
        "astId": 14396,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "tokenCheckpoints",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)14423_storage))"
      },
      {
        "astId": 14400,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "totalTokenCheckpoints",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14406,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "processedCheckpoints",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14410,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "lastFeeWithdrawalTime",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14414,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "unprocessedAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 14432,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "reentrancyLock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14434,
        "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
        "label": "whitelistedConverterList",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(AddressSet)34855_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IProtocol)14482": {
        "encoding": "inplace",
        "label": "contract IProtocol",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)16821": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)14423_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct FeeSharingCollectorStorage.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Checkpoint)14423_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint256,t_struct(Checkpoint)14423_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FeeSharingCollectorStorage.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)14423_storage"
      },
      "t_struct(AddressSet)34855_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableAddressSet.AddressSet",
        "members": [
          {
            "astId": 34851,
            "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 34854,
            "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Checkpoint)14423_storage": {
        "encoding": "inplace",
        "label": "struct FeeSharingCollectorStorage.Checkpoint",
        "members": [
          {
            "astId": 14416,
            "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 14418,
            "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
            "label": "timestamp",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 14420,
            "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
            "label": "totalWeightedStake",
            "offset": 8,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 14422,
            "contract": "contracts/governance/FeeSharingCollector/FeeSharingCollector.sol:FeeSharingCollector",
            "label": "numTokens",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}